/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.addon.user.myapplication.layout;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.addon.user.myapplication.MainActivity;
import com.addon.user.myapplication.R;
import com.addon.user.myapplication.view.NoticeAdapter;
import com.addon.user.myapplication.view.NoticeItem;

import org.w3c.dom.Text;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class MusicLayout extends BaseLinearLayout {
    public LinearLayout layout;
    public MainActivity mainActivity;

    // 랭크 SPINNER
    private Spinner instrumentRankSpinner;
    private Spinner songRankSpinner;
    private Spinner BFRankSpinner;
    private Spinner VVRankSpinner;
    private Spinner BVRankSpinner;
    private Spinner MCRankSpinner;
    private Spinner SPRankSpinner;

    // 랭크 SPINNER DATA ARRAY
    private ArrayAdapter<CharSequence> IRSDataArray;
    private ArrayAdapter<CharSequence> SONGDataArray;
    private ArrayAdapter<CharSequence> BFRDataArray;
    private ArrayAdapter<CharSequence> VVRDataArray;
    private ArrayAdapter<CharSequence> BVRDataArray;
    private ArrayAdapter<CharSequence> MCRDataArray;
    private ArrayAdapter<CharSequence> SPRDataArray;

    // 타이틀 SPINNER
    private Spinner firstTitleSpinner;
    private Spinner secondTitleSpinner;

    // 타이틀 SPINNER DATA ARRAY
    private ArrayAdapter<CharSequence> firstTitleDataArray;
    private ArrayAdapter<CharSequence> secondTitleDataArray;

    // 왼쪽 악세 SPINNER
    private Spinner leftAccessoryInchant1Spinner;
    private Spinner leftAccessoryInchant2Spinner;
    private Spinner leftAccessoryNMESpinner;
    private Spinner leftAccessoryGMESpinner;
    private Spinner leftAccessoryBMESpinner;
    private Spinner leftAccessoryVVMSSpinner;
    private Spinner leftAccessoryVVASSpinner;
    private Spinner leftAccessoryBVGSSpinner;

    // 오른쪽 악세 SPINNER
    private Spinner rightAccessoryInchant1Spinner;
    private Spinner rightAccessoryInchant2Spinner;
    private Spinner rightAccessoryNMESpinner;
    private Spinner rightAccessoryGMESpinner;
    private Spinner rightAccessoryBMESpinner;
    private Spinner rightAccessoryVVMSSpinner;
    private Spinner rightAccessoryVVASSpinner;
    private Spinner rightAccessoryBVGSSpinner;

    // 머리 SPINNER
    // private Spinner headInchant1Spinner;
    private Spinner headInchant2Spinner;

    // 옷 SPINNER
    private Spinner clothInchant1Spinner;
    private Spinner clothInchant2Spinner;

    // 장갑 SPINNER
    private Spinner handClothInchant1Spinner;
    // private Spinner handClothInchant2Spinner;
    private Spinner handClothBVGSSpinner;

    // 신발 SPINNER
    private Spinner shoesInchant1Spinner;
    // private Spinner shoesInchant2Spinner;
    private Spinner shoesVVMSSpinner;
    private Spinner shoesVVASSpinner;

    // 왼쪽 악세 SPINNER DATA ARRAY
    private ArrayAdapter<CharSequence> leftAccessoryInchant1DataArray;
    private ArrayAdapter<CharSequence> leftAccessoryInchant2DataArray;
    private ArrayAdapter<CharSequence> leftAccessoryNMEDataArray;
    private ArrayAdapter<CharSequence> leftAccessoryGMEDataArray;
    private ArrayAdapter<CharSequence> leftAccessoryBMEDataArray;
    private ArrayAdapter<CharSequence> leftAccessoryVVMSDataArray;
    private ArrayAdapter<CharSequence> leftAccessoryVVASDataArray;
    private ArrayAdapter<CharSequence> leftAccessoryBVGSDataArray;

    // 오른쪽 악세 SPINNER DATA ARRAY
    private ArrayAdapter<CharSequence> rightAccessoryInchant1DataArray;
    private ArrayAdapter<CharSequence> rightAccessoryInchant2DataArray;
    private ArrayAdapter<CharSequence> rightAccessoryNMEDataArray;
    private ArrayAdapter<CharSequence> rightAccessoryGMEDataArray;
    private ArrayAdapter<CharSequence> rightAccessoryBMEDataArray;
    private ArrayAdapter<CharSequence> rightAccessoryVVMSDataArray;
    private ArrayAdapter<CharSequence> rightAccessoryVVASDataArray;
    private ArrayAdapter<CharSequence> rightAccessoryBVGSDataArray;

    // 머리 SPINNER DATA ARRAY
    private ArrayAdapter<CharSequence> headInchant1DataArray;
    private ArrayAdapter<CharSequence> headInchant2DataArray;

    // 옷 SPINNER DATA ARRAY
    private ArrayAdapter<CharSequence> clothInchant1DataArray;
    private ArrayAdapter<CharSequence> clothInchant2DataArray;

    // 장갑 SPINNER DATA ARRAY
    private ArrayAdapter<CharSequence> handClothInchant1DataArray;
    private ArrayAdapter<CharSequence> handClothInchant2DataArray;
    private ArrayAdapter<CharSequence> handClothBVGSDataArray;

    // 신발 SPINNER DATA ARRAY
    private ArrayAdapter<CharSequence> shoesInchant1DataArray;
    private ArrayAdapter<CharSequence> shoesInchant2DataArray;
    private ArrayAdapter<CharSequence> shoesVVMSDataArray;
    private ArrayAdapter<CharSequence> shoesVVASDataArray;

    // TEXTVIEW
    // 전장의 서곡
    private TextView bfValueTextView_1_1;
    private TextView bfValueTextView_2_1;
    private TextView bfValueTextView_3_1;
    private TextView bfValueTextView_1_2;
    private TextView bfValueTextView_2_2;
    private TextView bfValueTextView_3_2;
    private TextView bfValueTextView_1_3;
    private TextView bfValueTextView_2_3;
    private TextView bfValueTextView_3_3;

    // 비바체
    private TextView vvValueTextView_1_1;
    private TextView vvValueTextView_2_1;
    private TextView vvValueTextView_3_1;
    private TextView vvValueTextView_1_2;
    private TextView vvValueTextView_2_2;
    private TextView vvValueTextView_3_2;
    private TextView vvValueTextView_1_3;
    private TextView vvValueTextView_2_3;
    private TextView vvValueTextView_3_3;

    // 풍년가
    private TextView bvValueTextView_1_1;
    private TextView bvValueTextView_2_1;
    private TextView bvValueTextView_3_1;
    private TextView bvValueTextView_1_2;
    private TextView bvValueTextView_2_2;
    private TextView bvValueTextView_3_2;
    private TextView bvValueTextView_1_3;
    private TextView bvValueTextView_2_3;
    private TextView bvValueTextView_3_3;

    // 행진곡
    private TextView mcValueTextView_1_1;
    private TextView mcValueTextView_1_2;
    private TextView mcValueTextView_1_3;

    // 인내의 노래
    private TextView spValueTextView_1_1;
    private TextView spValueTextView_2_1;
    private TextView spValueTextView_3_1;
    private TextView spValueTextView_1_2;
    private TextView spValueTextView_2_2;
    private TextView spValueTextView_3_2;
    private TextView spValueTextView_1_3;
    private TextView spValueTextView_2_3;
    private TextView spValueTextView_3_3;

    // DATA
    private int musicPlusCountInt = 0;
    private int BFCountInt = 0;
    private int VVCountInt = 0;
    private int BYCountInt = 0;
    private int MCCountInt = 0;
    private int SPCountInt = 0;

    private int VVMSCountInt = 0;
    private int VVASCountInt = 0;
    private int BVGSCountInt = 0;
    private int NMECountInt = 0;
    private int GMECountInt = 0;
    private int BMECountInt = 0;

    // 스킬 랭크에 따른 기본 수치
    // 악기 연주
    private int baseIRSValue = 0;
    // 노래
    private int baseSongValue = 0;
    // 전장의 서곡 ( 최뎀, 민뎀, 크리티컬 )
    private int baseBFValue1 = 0;
    private int baseBFValue2 = 0;
    private int baseBFValue3 = 0;
    // 비바체 ( 마시속, 공속, 연금속 )
    private int baseVVValue1 = 0;
    private int baseVVValue2 = 0;
    private int baseVVValue3 = 0;
    // 풍년가 ( 채집성공, 생산성공, 채집속도 )
    private int baseBVValue1 = 0;
    private int baseBVValue2 = 0;
    private int baseBVValue3 = 0;
    // 행진곡 ( 이동속도 )
    private int baseMCValue1 = 0;
    // 인내의 노래 ( 방어/마방, 보호/마보, 마나/스테 )
    private int baseSPValue1 = 0;
    private int baseSPValue2 = 0;
    private int baseSPValue3 = 0;

    // 처음 시작할때 악연이랑 노래는 실행안하기 위한 구분값
    private boolean isFirstMusic = true;
    private boolean isFirstSong = true;

    // 처음 시작 및 저장 데이터를 주기 위해서 db 호출
    private SQLiteDatabase localDb;

    // 데이터 맵
    private Map<String, String> dataMap = new HashMap<String, String>();

    // 탭
    private LinearLayout tab1Layout;
    private LinearLayout tab2Layout;
    private TextView tab1Button;
    private TextView tab2Button;

    public MusicLayout(Context context) {
        super(context);
    }

    public void initialization(Object[] obj) {
        layout = (LinearLayout)getView(R.layout.music_layout);
        addView(layout);

        // 랭크 SPINNER SETTING
        instrumentRankSpinner = layout.findViewById(R.id.instrumentRankSpinner);
        songRankSpinner = layout.findViewById(R.id.songRankSpinner);
        BFRankSpinner = layout.findViewById(R.id.BFRankSpinner);
        VVRankSpinner = layout.findViewById(R.id.VVRankSpinner);
        BVRankSpinner = layout.findViewById(R.id.BVRankSpinner);
        MCRankSpinner = layout.findViewById(R.id.MCRankSpinner);
        SPRankSpinner = layout.findViewById(R.id.SPRankSpinner);

        // 타이틀 SPINNER SETTING
        firstTitleSpinner = layout.findViewById(R.id.firstTitleSpinner);
        secondTitleSpinner = layout.findViewById(R.id.secondTitleSpinner);

        // 왼쪽 악세 SPINNER SETTING
        leftAccessoryInchant1Spinner = layout.findViewById(R.id.leftAccessoryInchant1);
        leftAccessoryInchant2Spinner = layout.findViewById(R.id.leftAccessoryInchant2);
        leftAccessoryNMESpinner = layout.findViewById(R.id.leftAccessoryNME);
        leftAccessoryGMESpinner = layout.findViewById(R.id.leftAccessoryGME);
        leftAccessoryBMESpinner = layout.findViewById(R.id.leftAccessoryBME);
        leftAccessoryVVMSSpinner = layout.findViewById(R.id.leftAccessoryVVMS);
        leftAccessoryVVASSpinner = layout.findViewById(R.id.leftAccessoryVVAS);
        leftAccessoryBVGSSpinner = layout.findViewById(R.id.leftAccessoryBVGS);

        // 오른쪽 악세 SPINNER SETTING
        rightAccessoryInchant1Spinner = layout.findViewById(R.id.rightAccessoryInchant1);
        rightAccessoryInchant2Spinner = layout.findViewById(R.id.rightAccessoryInchant2);
        rightAccessoryNMESpinner = layout.findViewById(R.id.rightAccessoryNME);
        rightAccessoryGMESpinner = layout.findViewById(R.id.rightAccessoryGME);
        rightAccessoryBMESpinner = layout.findViewById(R.id.rightAccessoryBME);
        rightAccessoryVVMSSpinner = layout.findViewById(R.id.rightAccessoryVVMS);
        rightAccessoryVVASSpinner = layout.findViewById(R.id.rightAccessoryVVAS);
        rightAccessoryBVGSSpinner = layout.findViewById(R.id.rightAccessoryBVGS);

        // 머리 SPINNER SETTING
        // headInchant1Spinner = layout.findViewById(R.id.headInchant1);
        headInchant2Spinner = layout.findViewById(R.id.headInchant2);

        // 옷 SPINNER SETTING
        clothInchant1Spinner = layout.findViewById(R.id.clothInchant1);
        clothInchant2Spinner = layout.findViewById(R.id.clothInchant2);

        // 장갑 SPINNER SETTING
        handClothInchant1Spinner = layout.findViewById(R.id.handClothInchant1);
        // handClothInchant2Spinner = layout.findViewById(R.id.handClothInchant2);
        handClothBVGSSpinner = layout.findViewById(R.id.handClothBVGS);

        // 신발 SPINNER SETTING
        shoesInchant1Spinner = layout.findViewById(R.id.shoesInchant1);
        // shoesInchant2Spinner = layout.findViewById(R.id.shoesInchant2);
        shoesVVMSSpinner = layout.findViewById(R.id.shoesVVMS);
        shoesVVASSpinner = layout.findViewById(R.id.shoesVVAS);

        // TEXTVIEW
        bfValueTextView_1_1 = findViewById(R.id.bf_value_1_1);
        bfValueTextView_2_1 = findViewById(R.id.bf_value_2_1);
        bfValueTextView_3_1 = findViewById(R.id.bf_value_3_1);
        bfValueTextView_1_2 = findViewById(R.id.bf_value_1_2);
        bfValueTextView_2_2 = findViewById(R.id.bf_value_2_2);
        bfValueTextView_3_2 = findViewById(R.id.bf_value_3_2);
        bfValueTextView_1_3 = findViewById(R.id.bf_value_1_3);
        bfValueTextView_2_3 = findViewById(R.id.bf_value_2_3);
        bfValueTextView_3_3 = findViewById(R.id.bf_value_3_3);

        vvValueTextView_1_1 = findViewById(R.id.vv_value_1_1);
        vvValueTextView_2_1 = findViewById(R.id.vv_value_2_1);
        vvValueTextView_3_1 = findViewById(R.id.vv_value_3_1);
        vvValueTextView_1_2 = findViewById(R.id.vv_value_1_2);
        vvValueTextView_2_2 = findViewById(R.id.vv_value_2_2);
        vvValueTextView_3_2 = findViewById(R.id.vv_value_3_2);
        vvValueTextView_1_3 = findViewById(R.id.vv_value_1_3);
        vvValueTextView_2_3 = findViewById(R.id.vv_value_2_3);
        vvValueTextView_3_3 = findViewById(R.id.vv_value_3_3);

        bvValueTextView_1_1 = findViewById(R.id.bv_value_1_1);
        bvValueTextView_2_1 = findViewById(R.id.bv_value_2_1);
        bvValueTextView_3_1 = findViewById(R.id.bv_value_3_1);
        bvValueTextView_1_2 = findViewById(R.id.bv_value_1_2);
        bvValueTextView_2_2 = findViewById(R.id.bv_value_2_2);
        bvValueTextView_3_2 = findViewById(R.id.bv_value_3_2);
        bvValueTextView_1_3 = findViewById(R.id.bv_value_1_3);
        bvValueTextView_2_3 = findViewById(R.id.bv_value_2_3);
        bvValueTextView_3_3 = findViewById(R.id.bv_value_3_3);

        mcValueTextView_1_1 = findViewById(R.id.mc_value_1_1);
        mcValueTextView_1_2 = findViewById(R.id.mc_value_1_2);
        mcValueTextView_1_3 = findViewById(R.id.mc_value_1_3);

        spValueTextView_1_1 = findViewById(R.id.sp_value_1_1);
        spValueTextView_2_1 = findViewById(R.id.sp_value_2_1);
        spValueTextView_3_1 = findViewById(R.id.sp_value_3_1);
        spValueTextView_1_2 = findViewById(R.id.sp_value_1_2);
        spValueTextView_2_2 = findViewById(R.id.sp_value_2_2);
        spValueTextView_3_2 = findViewById(R.id.sp_value_3_2);
        spValueTextView_1_3 = findViewById(R.id.sp_value_1_3);
        spValueTextView_2_3 = findViewById(R.id.sp_value_2_3);
        spValueTextView_3_3 = findViewById(R.id.sp_value_3_3);

        // 탭 버튼
        tab1Layout = findViewById(R.id.tab1Layout);
        tab2Layout = findViewById(R.id.tab2Layout);
        tab1Button = findViewById(R.id.tab_1);
        tab2Button = findViewById(R.id.tab_2);

        this.setSpinnerData();
        this.tabButtonSetting();
    }

    private void tabButtonSetting(){
        tab1Button.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                tab1Layout.setVisibility(View.VISIBLE);
                tab2Layout.setVisibility(View.GONE);
            }
        });

        tab2Button.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                tab1Layout.setVisibility(View.GONE);
                tab2Layout.setVisibility(View.VISIBLE);
            }
        });
    }

    /**
     * SPINNER 데이터 세팅
     */
    public void setSpinnerData(){
        //************************ 랭크 시작 ************************/
        // 악기 연주 랭크
        // instrumentRankSpinner.setPrompt("출발 마을을 선택하시오.");
        IRSDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        IRSDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        instrumentRankSpinner.setAdapter(IRSDataArray);
        instrumentRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("IRS", IRSDataArray.getItem(i).toString());

                if(!isFirstMusic) {
                    setFinishValue("BF");
                    setFinishValue("VV");
                    setFinishValue("BV");
                    setFinishValue("MC");
                    setFinishValue("SP");

                    setUpdateData("instrumentRank", String.valueOf(i));
                }else{
                    isFirstMusic = false;
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        // 노래 랭크
        SONGDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        SONGDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        songRankSpinner.setAdapter(SONGDataArray);
        songRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("SONG", SONGDataArray.getItem(i).toString());

                if(!isFirstSong) {
                    setFinishValue("BF");
                    setFinishValue("VV");
                    setFinishValue("BV");
                    setFinishValue("MC");
                    setFinishValue("SP");

                    setUpdateData("songRank", String.valueOf(i));
                }else{
                    isFirstSong = false;
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        // 전장의 서곡 랭크
        BFRDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        BFRDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        BFRankSpinner.setAdapter(BFRDataArray);
        BFRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("BF", BFRDataArray.getItem(i).toString());

                setFinishValue("BF");

                setUpdateData("BFRank", String.valueOf(i));
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        // 비바체 랭크
        VVRDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        VVRDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        VVRankSpinner.setAdapter(VVRDataArray);
        VVRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("VV", VVRDataArray.getItem(i).toString());

                setFinishValue("VV");

                setUpdateData("VVRank", String.valueOf(i));
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        // 풍년가 랭크
        BVRDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        BVRDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        BVRankSpinner.setAdapter(BVRDataArray);
        BVRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("BV", BVRDataArray.getItem(i).toString());

                setFinishValue("BV");

                setUpdateData("BVRank", String.valueOf(i));
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        // 행진곡 랭크
        MCRDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        MCRDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        MCRankSpinner.setAdapter(MCRDataArray);
        MCRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("MC", MCRDataArray.getItem(i).toString());

                setFinishValue("MC");

                setUpdateData("MCRank", String.valueOf(i));
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        // 인내의 노래 랭크
        SPRDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        SPRDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        SPRankSpinner.setAdapter(SPRDataArray);
        SPRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("SP", SPRDataArray.getItem(i).toString());
                setFinishValue("SP");
                setUpdateData("SPRank", String.valueOf(i));
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });
        //************************ 랭크 종료 ************************/

        //************************ 타이틀 시작 ************************/
        // 1차 타이틀
        setSpinnerView(firstTitleSpinner, firstTitleDataArray, R.array.musicFirstTitleArray, "firstTitleSpinner");
        // 2차 타이틀
        setSpinnerView(secondTitleSpinner, secondTitleDataArray, R.array.musicSecondTitleArray, "secondTitleSpinner");
        //************************ 타이틀 종료 ************************/

        //************************ 왼쪽 악세 시작 ************************/
        // 접두 인챈트
        setSpinnerView(leftAccessoryInchant1Spinner, leftAccessoryInchant1DataArray, R.array.musicInchantForAccessory1, "leftAccessoryInchant1Spinner");
        // 접미 인챈트
        setSpinnerView(leftAccessoryInchant2Spinner, leftAccessoryInchant2DataArray, R.array.musicInchantForAccessory2, "leftAccessoryInchant2Spinner");
        // 보통 연주
        setSpinnerView(leftAccessoryNMESpinner, leftAccessoryNMEDataArray, R.array.workmangshipSelectedFor3, "leftAccessoryNMESpinner");
        // 훌륭한 연주
        setSpinnerView(leftAccessoryGMESpinner, leftAccessoryGMEDataArray, R.array.workmangshipSelectedFor3, "leftAccessoryGMESpinner");
        // 신들린 연주
        setSpinnerView(leftAccessoryBMESpinner, leftAccessoryBMEDataArray, R.array.workmangshipSelectedFor3, "leftAccessoryBMESpinner");
        // 마법 시전 속도
        setSpinnerView(leftAccessoryVVMSSpinner, leftAccessoryVVMSDataArray, R.array.workmangshipSelectedFor3, "leftAccessoryVVMSSpinner");
        // 공격 속도
        setSpinnerView(leftAccessoryVVASSpinner, leftAccessoryVVASDataArray, R.array.workmangshipSelectedFor3, "leftAccessoryVVASSpinner");
        // 풍년가 채집 속도
        setSpinnerView(leftAccessoryBVGSSpinner, leftAccessoryBVGSDataArray, R.array.workmangshipSelectedFor3, "leftAccessoryBVGSSpinner");
        //************************ 왼쪽 악세 종료 ************************/

        //************************ 오른쪽 악세 시작 ************************/
        // 접두 인챈트
        setSpinnerView(rightAccessoryInchant1Spinner, rightAccessoryInchant1DataArray, R.array.musicInchantForAccessory1, "rightAccessoryInchant1Spinner");
        // 접미 인챈트
        setSpinnerView(rightAccessoryInchant2Spinner, rightAccessoryInchant2DataArray, R.array.musicInchantForAccessory2, "rightAccessoryInchant2Spinner");
        // 보통 연주
        setSpinnerView(rightAccessoryNMESpinner, rightAccessoryNMEDataArray, R.array.workmangshipSelectedFor3, "rightAccessoryNMESpinner");
        // 훌륭한 연주
        setSpinnerView(rightAccessoryGMESpinner, rightAccessoryGMEDataArray, R.array.workmangshipSelectedFor3, "rightAccessoryGMESpinner");
        // 신들린 연주
        setSpinnerView(rightAccessoryBMESpinner, rightAccessoryBMEDataArray, R.array.workmangshipSelectedFor3, "rightAccessoryBMESpinner");
        // 마법 시전 속도
        setSpinnerView(rightAccessoryVVMSSpinner, rightAccessoryVVMSDataArray, R.array.workmangshipSelectedFor3, "rightAccessoryVVMSSpinner");
        // 공격 속도
        setSpinnerView(rightAccessoryVVASSpinner, rightAccessoryVVASDataArray, R.array.workmangshipSelectedFor3, "rightAccessoryVVASSpinner");
        // 풍년가 채집 속도
        setSpinnerView(rightAccessoryBVGSSpinner, rightAccessoryBVGSDataArray, R.array.workmangshipSelectedFor3, "rightAccessoryBVGSSpinner");
        //************************ 오른쪽 악세 종료 ************************/

        //************************ 머리 시작 ************************/
        // 접미 인챈트
        setSpinnerView(headInchant2Spinner, headInchant2DataArray, R.array.musicInchantForHead, "headInchant2Spinner");
        //************************ 머리 종료 ************************/

        //************************ 옷 시작 ************************/
        // 접두 인챈트
        setSpinnerView(clothInchant1Spinner, clothInchant1DataArray, R.array.musicInchantForCloth1, "clothInchant1Spinner");
        // 접미 인챈트
        setSpinnerView(clothInchant2Spinner, clothInchant2DataArray, R.array.musicInchantForCloth2, "clothInchant2Spinner");
        //************************ 옷 종료 ************************/

        //************************ 장갑 시작 ************************/
        // 접두 인챈트
        setSpinnerView(handClothInchant1Spinner, handClothInchant1DataArray, R.array.musicInchantForShoes, "handClothInchant1Spinner");
        // 풍년가 채집 속도
        setSpinnerView(handClothBVGSSpinner, handClothBVGSDataArray, R.array.workmangshipSelectedFor3, "handClothBVGSSpinner");
        //************************ 장갑 종료 ************************/

        //************************ 신발 시작 ************************/
        // 접두 인챈트
        setSpinnerView(shoesInchant1Spinner, shoesInchant1DataArray, R.array.musicInchantForShoes, "shoesInchant1Spinner");
        // 마법 시전 속도
        setSpinnerView(shoesVVMSSpinner, shoesVVMSDataArray, R.array.workmangshipSelectedFor3, "shoesVVMSSpinner");
        // 비바체 공격 속도
        setSpinnerView(shoesVVASSpinner, shoesVVASDataArray, R.array.workmangshipSelectedFor3, "shoesVVASSpinner");
        //************************ 신발 종료 ************************/
    }

    /**
     * 입력되어 있는 데이터 가져오기
     * @param db
     * @param obj
     */
    public void setData(SQLiteDatabase db, Object[] obj) {
        localDb = db;

        // DB SELECT
        String sql = "SELECT keyName, keyContent FROM LOCALDATATABLE WHERE useLayout = 'MUSIC'";
        Cursor cursor = localDb.rawQuery(sql, null);

        while(cursor.moveToNext()) {
            String keyName = cursor.getString(0);
            String keyContent = cursor.getString(1);

            setDataFromKey(keyName, keyContent);
        }
    }

    /**
     * Key 정보를 받아서 레이아웃 세팅
     * @param keyName
     * @param keyContent
     */
    private void setDataFromKey(String keyName, String keyContent){
        switch (keyName){
            case "instrumentRank" :
                instrumentRankSpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "songRank" :
                songRankSpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "BFRank" :
                BFRankSpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "VVRank" :
                VVRankSpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "BVRank" :
                BVRankSpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "MCRank" :
                MCRankSpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "SPRank" :
                SPRankSpinner.setSelection(Integer.parseInt(keyContent));
            break;
        }
    }

    /**
     * 로컬 데이터 변경해주기
     * @param keyName
     * @param keyContent
     */
    private void setUpdateData(String keyName, String keyContent){
        localDb.execSQL("UPDATE LOCALDATATABLE SET keyContent = '" + keyContent + "' WHERE useLayout = 'MUSIC' AND keyName = '" + keyName + "';");
    }
    
    public void setData(Object[] obj) {
    }

    private void setFinishValue(String gubun){
        // 기본 : 스킬효과 * ( 1 + ( 세공vs에코스톤(연주) ) / 100 ) * ( 100 + 악기연주효과 ) / 10000
        // 보연은 기본 + 0
        // 훌연은 기본 + 10
        // 신들은 기본 + 30


        // 연주효과 +부분 넣어줘야함
        // 보연/훌연/신들 세공 및 에코스톤 확인해서 리턴 필요

        // 보통 연주
        int normalMusicInt = NMECountInt;

        // 훌륭한 연주
        int greatMusicInt = GMECountInt + 10;

        // 신들린 연주
        int bestMusicInt = BMECountInt + 30;

        // 악기 연주 랭크 + 노래 랭크 + 악기 연주 효과
        int musicEffectFromRankInt = baseIRSValue + baseSongValue + musicPlusCountInt;

        // (악기 연주 랭크 + 노래 랭크 + 악기 연주 효과) + 전장의 서곡 효과
        int musicEffectForBFInt = musicEffectFromRankInt + BFCountInt;

        // (악기 연주 랭크 + 노래 랭크 + 악기 연주 효과) + 비바체 효과
        int musicEffectForVVInt = musicEffectFromRankInt + VVCountInt;
        int musicEffectForVVMSInt = musicEffectForVVInt + VVMSCountInt;
        int musicEffectForVVASInt = musicEffectForVVInt + VVASCountInt;

        // (악기 연주 랭크 + 노래 랭크 + 악기 연주 효과) + 풍년가 효과
        int musicEffectForBVInt = musicEffectFromRankInt + BYCountInt;

        // (악기 연주 랭크 + 노래 랭크 + 악기 연주 효과) + 행진곡 효과
        int musicEffectForMCInt = musicEffectFromRankInt + MCCountInt;

        // (악기 연주 랭크 + 노래 랭크 + 악기 연주 효과) + 인내의 노래 효과
        int musicEffectForSPInt = musicEffectFromRankInt + SPCountInt;

        //****************** 전장의 서곡 보통 연주 START ******************/
        float bfValue1_1 = baseBFValue1 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        bfValueTextView_1_1.setText(String.format("%.2f", bfValue1_1));

        float bfValue2_1 = baseBFValue2 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        bfValueTextView_2_1.setText(String.format("%.2f", bfValue2_1));

        float bfValue3_1 = baseBFValue3 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        bfValueTextView_3_1.setText(String.format("%.2f", bfValue3_1));
        //****************** 전장의 서곡 보통 연주 END ******************/

        //****************** 전장의 서곡 훌륭한 연주 START ******************/
        float bfValue1_2 = baseBFValue1 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        bfValueTextView_1_2.setText(String.format("%.2f", bfValue1_2));

        float bfValue2_2 = baseBFValue2 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        bfValueTextView_2_2.setText(String.format("%.2f", bfValue2_2));

        float bfValue3_2 = baseBFValue3 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        bfValueTextView_3_2.setText(String.format("%.2f", bfValue3_2));
        //****************** 전장의 서곡 훌륭한 연주 END ******************/

        //****************** 전장의 서곡 신들린 연주 START ******************/
        float bfValue1_3 = baseBFValue1 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        bfValueTextView_1_3.setText(String.format("%.2f", bfValue1_3));

        float bfValue2_3 = baseBFValue2 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        bfValueTextView_2_3.setText(String.format("%.2f", bfValue2_3));

        float bfValue3_3 = baseBFValue3 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        bfValueTextView_3_3.setText(String.format("%.2f", bfValue3_3));
        //****************** 전장의 서곡 신들린 연주 END ******************/

        //****************** 비바체 보통 연주 START ******************/
        float vvValue1_1 = baseVVValue1 * ( 100 + musicEffectForVVMSInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        vvValueTextView_1_1.setText(String.format("%.2f", vvValue1_1));

        float vvValue2_1 = baseVVValue2 * ( 100 + musicEffectForVVASInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        vvValueTextView_2_1.setText(String.format("%.2f", vvValue2_1));

        float vvValue3_1 = baseVVValue3 * ( 100 + musicEffectForVVInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        vvValueTextView_3_1.setText(String.format("%.2f", vvValue3_1));
        //****************** 비바체 보통 연주 END ******************/

        //****************** 비바체 훌륭한 연주 START ******************/
        float vvValue1_2 = baseVVValue1 * ( 100 + musicEffectForVVMSInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        vvValueTextView_1_2.setText(String.format("%.2f", vvValue1_2));

        float vvValue2_2 = baseVVValue2 * ( 100 + musicEffectForVVASInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        vvValueTextView_2_2.setText(String.format("%.2f", vvValue2_2));

        float vvValue3_2 = baseVVValue3 * ( 100 + musicEffectForVVInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        vvValueTextView_3_2.setText(String.format("%.2f", vvValue3_2));
        //****************** 비바체 훌륭한 연주 END ******************/

        //****************** 비바체 신들린 연주 START ******************/
        float vvValue1_3 = baseVVValue1 * ( 100 + musicEffectForVVMSInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        vvValueTextView_1_3.setText(String.format("%.2f", vvValue1_3));

        float vvValue2_3 = baseVVValue2 * ( 100 + musicEffectForVVASInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        vvValueTextView_2_3.setText(String.format("%.2f", vvValue2_3));

        float vvValue3_3 = baseVVValue3 * ( 100 + musicEffectForVVInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        vvValueTextView_3_3.setText(String.format("%.2f", vvValue3_3));

        //****************** 풍년가 보통 연주 START ******************/
        float bvValue1_1 = baseBVValue1;
        bvValueTextView_1_1.setText(String.format("%.2f", bvValue1_1));

        float bvValue2_1 = baseBVValue2;
        bvValueTextView_2_1.setText(String.format("%.2f", bvValue2_1));

        float bvValue3_1 = baseBVValue3 * ( 100 + musicEffectForBVInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        bvValueTextView_3_1.setText(String.format("%.2f", bvValue3_1));
        //****************** 풍년가 보통 연주 END ******************/

        //****************** 풍년가 훌륭한 연주 START ******************/
        float bvValue1_2 = baseBVValue1;
        bvValueTextView_1_2.setText(String.format("%.2f", bvValue1_2));

        float bvValue2_2 = baseBVValue2;
        bvValueTextView_2_2.setText(String.format("%.2f", bvValue2_2));

        float bvValue3_2 = baseBVValue3 * ( 100 + musicEffectForBVInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        bvValueTextView_3_2.setText(String.format("%.2f", bvValue3_2));
        //****************** 풍년가 훌륭한 연주 END ******************/

        //****************** 풍년가 신들린 연주 START ******************/
        float bvValue1_3 = baseBVValue1;
        bvValueTextView_1_3.setText(String.format("%.2f", bvValue1_3));

        float bvValue2_3 = baseBVValue2;
        bvValueTextView_2_3.setText(String.format("%.2f", bvValue2_3));

        float bvValue3_3 = baseBVValue3 * ( 100 + musicEffectForBVInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        bvValueTextView_3_3.setText(String.format("%.2f", bvValue3_3));
        //****************** 풍년가 신들린 연주 END ******************/

        //****************** 행진곡 보통 연주 START ******************/
        float mcValue1_1 = baseMCValue1 * ( 100 + musicEffectForMCInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        mcValueTextView_1_1.setText(String.format("%.2f", mcValue1_1));
        //****************** 행진곡 보통 연주 END ******************/

        //****************** 행진곡 훌륭한 연주 START ******************/
        float mcValue1_2 = baseMCValue1 * ( 100 + musicEffectForMCInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        mcValueTextView_1_2.setText(String.format("%.2f", mcValue1_2));
        //****************** 행진곡 훌륭한 연주 END ******************/

        //****************** 행진곡 신들린 연주 START ******************/
        float mcValue1_3 = baseMCValue1 * ( 100 + musicEffectForMCInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        mcValueTextView_1_3.setText(String.format("%.2f", mcValue1_3));
        //****************** 행진곡 신들린 연주 END ******************/

        //****************** 인내의 노래 보통 연주 START ******************/
        float spValue1_1 = baseSPValue1 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        spValueTextView_1_1.setText(String.format("%.2f", spValue1_1));

        float spValue2_1 = baseSPValue2 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        spValueTextView_2_1.setText(String.format("%.2f", spValue2_1));

        float spValue3_1 = baseSPValue3 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        spValueTextView_3_1.setText(String.format("%.2f", spValue3_1));
        //****************** 인내의 노래 보통 연주 END ******************/

        //****************** 인내의 노래 훌륭한 연주 START ******************/
        float spValue1_2 = baseSPValue1 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        spValueTextView_1_2.setText(String.format("%.2f", spValue1_2));

        float spValue2_2 = baseSPValue2 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        spValueTextView_2_2.setText(String.format("%.2f", spValue2_2));

        float spValue3_2 = baseSPValue3 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        spValueTextView_3_2.setText(String.format("%.2f", spValue3_2));
        //****************** 인내의 노래 훌륭한 연주 END ******************/

        //****************** 인내의 노래 신들린 연주 START ******************/
        float spValue1_3 = baseSPValue1 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        spValueTextView_1_3.setText(String.format("%.2f", spValue1_3));

        float spValue2_3 = baseSPValue2 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        spValueTextView_2_3.setText(String.format("%.2f", spValue2_3));

        float spValue3_3 = baseSPValue3 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        spValueTextView_3_3.setText(String.format("%.2f", spValue3_3));
        //****************** 인내의 노래 신들린 연주 END ******************/
    }

    /**
     * DataArray와 ArrayInt 받아서 Spinner 세팅
     * @param tempSpinner
     * @param tempDataArray
     * @param textArrayResId
     * @param gubun
     */
    private void setSpinnerView(Spinner tempSpinner, ArrayAdapter<CharSequence> tempDataArray, int textArrayResId, final String gubun){
        tempDataArray = ArrayAdapter.createFromResource(context, textArrayResId, R.layout.support_simple_spinner_dropdown_item);
        tempDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        tempSpinner.setAdapter(tempDataArray);
        final ArrayAdapter<CharSequence> finalTempDataArray = tempDataArray;
        tempSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                /*setBaseValueFromRank("SP", SPRDataArray.getItem(i).toString());
                setFinishValue("SP");
                setUpdateData("SPRank", String.valueOf(i));*/
                dataMap.put(gubun, finalTempDataArray.getItem(i).toString());
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });
    }

    /**
     * 랭크와 구분값에 맞춰서 기본 데이터 세팅
     * @param gubun
     * @param rank
     */
    private void setBaseValueFromRank(String gubun, String rank){
        switch (gubun){
            case "IRS" :
                switch (rank){
                    case "1랭크" :
                        baseIRSValue = 15;
                        break;
                    case "2랭크" :
                        baseIRSValue = 14;
                        break;
                    case "3랭크" :
                        baseIRSValue = 13;
                        break;
                    case "4랭크" :
                        baseIRSValue = 12;
                        break;
                    case "5랭크" :
                        baseIRSValue = 11;
                        break;
                    case "6랭크" :
                        baseIRSValue = 10;
                        break;
                    case "7랭크" :
                        baseIRSValue = 9;
                        break;
                    case "8랭크" :
                        baseIRSValue = 8;
                        break;
                    case "9랭크" :
                        baseIRSValue = 7;
                        break;
                    case "A랭크" :
                        baseIRSValue = 6;
                        break;
                    case "B랭크" :
                        baseIRSValue = 5;
                        break;
                    case "C랭크" :
                        baseIRSValue = 4;
                        break;
                    case "D랭크" :
                        baseIRSValue = 3;
                        break;
                    case "E랭크" :
                        baseIRSValue = 2;
                        break;
                    case "F랭크" :
                        baseIRSValue = 1;
                        break;
                    case "연습랭크" :
                        baseIRSValue = 0;
                        break;
                }
                break;
            case "SONG" :
                switch (rank){
                    case "1랭크" :
                        baseSongValue = 15;
                        break;
                    case "2랭크" :
                        baseSongValue = 14;
                        break;
                    case "3랭크" :
                        baseSongValue = 13;
                        break;
                    case "4랭크" :
                        baseSongValue = 12;
                        break;
                    case "5랭크" :
                        baseSongValue = 11;
                        break;
                    case "6랭크" :
                        baseSongValue = 10;
                        break;
                    case "7랭크" :
                        baseSongValue = 9;
                        break;
                    case "8랭크" :
                        baseSongValue = 8;
                        break;
                    case "9랭크" :
                        baseSongValue = 7;
                        break;
                    case "A랭크" :
                        baseSongValue = 6;
                        break;
                    case "B랭크" :
                        baseSongValue = 5;
                        break;
                    case "C랭크" :
                        baseSongValue = 4;
                        break;
                    case "D랭크" :
                        baseSongValue = 3;
                        break;
                    case "E랭크" :
                        baseSongValue = 2;
                        break;
                    case "F랭크" :
                        baseSongValue = 1;
                        break;
                    case "연습랭크" :
                        baseSongValue = 0;
                        break;
                }
                break;
            case "BF" :
                switch (rank){
                    case "1랭크" :
                        baseBFValue1 = 20;
                        baseBFValue2 = 20;
                        baseBFValue3 = 11;
                        break;
                    case "2랭크" :
                        baseBFValue1 = 19;
                        baseBFValue2 = 19;
                        baseBFValue3 = 10;
                        break;
                    case "3랭크" :
                        baseBFValue1 = 18;
                        baseBFValue2 = 18;
                        baseBFValue3 = 9;
                        break;
                    case "4랭크" :
                        baseBFValue1 = 17;
                        baseBFValue2 = 17;
                        baseBFValue3 = 8;
                        break;
                    case "5랭크" :
                        baseBFValue1 = 16;
                        baseBFValue2 = 16;
                        baseBFValue3 = 7;
                        break;
                    case "6랭크" :
                        baseBFValue1 = 16;
                        baseBFValue2 = 15;
                        baseBFValue3 = 6;
                        break;
                    case "7랭크" :
                        baseBFValue1 = 15;
                        baseBFValue2 = 15;
                        baseBFValue3 = 5;
                        break;
                    case "8랭크" :
                        baseBFValue1 = 15;
                        baseBFValue2 = 14;
                        baseBFValue3 = 5;
                        break;
                    case "9랭크" :
                        baseBFValue1 = 14;
                        baseBFValue2 = 14;
                        baseBFValue3 = 4;
                        break;
                    case "A랭크" :
                        baseBFValue1 = 13;
                        baseBFValue2 = 13;
                        baseBFValue3 = 3;
                        break;
                    case "B랭크" :
                        baseBFValue1 = 13;
                        baseBFValue2 = 12;
                        baseBFValue3 = 3;
                        break;
                    case "C랭크" :
                        baseBFValue1 = 12;
                        baseBFValue2 = 12;
                        baseBFValue3 = 2;
                        break;
                    case "D랭크" :
                        baseBFValue1 = 12;
                        baseBFValue2 = 11;
                        baseBFValue3 = 2;
                        break;
                    case "E랭크" :
                        baseBFValue1 = 11;
                        baseBFValue2 = 11;
                        baseBFValue3 = 1;
                        break;
                    case "F랭크" :
                        baseBFValue1 = 10;
                        baseBFValue2 = 10;
                        baseBFValue3 = 1;
                        break;
                    case "연습랭크" :
                        baseBFValue1 = 10;
                        baseBFValue2 = 10;
                        baseBFValue3 = 0;
                        break;
                }
                break;
            case "VV" :
                switch (rank){
                    case "1랭크" :
                        baseVVValue1 = 11;
                        baseVVValue2 = 11;
                        baseVVValue3 = 11;
                        break;
                    case "2랭크" :
                        baseVVValue1 = 10;
                        baseVVValue2 = 10;
                        baseVVValue3 = 10;
                        break;
                    case "3랭크" :
                        baseVVValue1 = 9;
                        baseVVValue2 = 9;
                        baseVVValue3 = 9;
                        break;
                    case "4랭크" :
                        baseVVValue1 = 8;
                        baseVVValue2 = 8;
                        baseVVValue3 = 8;
                        break;
                    case "5랭크" :
                        baseVVValue1 = 7;
                        baseVVValue2 = 7;
                        baseVVValue3 = 7;
                        break;
                    case "6랭크" :
                        baseVVValue1 = 7;
                        baseVVValue2 = 6;
                        baseVVValue3 = 6;
                        break;
                    case "7랭크" :
                        baseVVValue1 = 6;
                        baseVVValue2 = 6;
                        baseVVValue3 = 5;
                        break;
                    case "8랭크" :
                        baseVVValue1 = 6;
                        baseVVValue2 = 5;
                        baseVVValue3 = 4;
                        break;
                    case "9랭크" :
                        baseVVValue1 = 5;
                        baseVVValue2 = 5;
                        baseVVValue3 = 4;
                        break;
                    case "A랭크" :
                        baseVVValue1 = 4;
                        baseVVValue2 = 4;
                        baseVVValue3 = 3;
                        break;
                    case "B랭크" :
                        baseVVValue1 = 4;
                        baseVVValue2 = 3;
                        baseVVValue3 = 3;
                        break;
                    case "C랭크" :
                        baseVVValue1 = 3;
                        baseVVValue2 = 3;
                        baseVVValue3 = 2;
                        break;
                    case "D랭크" :
                        baseVVValue1 = 2;
                        baseVVValue2 = 2;
                        baseVVValue3 = 2;
                        break;
                    case "E랭크" :
                        baseVVValue1 = 2;
                        baseVVValue2 = 2;
                        baseVVValue3 = 1;
                        break;
                    case "F랭크" :
                        baseVVValue1 = 2;
                        baseVVValue2 = 1;
                        baseVVValue3 = 1;
                        break;
                    case "연습랭크" :
                        baseVVValue1 = 1;
                        baseVVValue2 = 1;
                        baseVVValue3 = 1;
                        break;
                }
                break;
            case "BV" :
                switch (rank){
                    case "1랭크" :
                        baseBVValue1 = 5;
                        baseBVValue2 = 5;
                        baseBVValue3 = 25;
                        break;
                    case "2랭크" :
                        baseBVValue1 = 5;
                        baseBVValue2 = 5;
                        baseBVValue3 = 22;
                        break;
                    case "3랭크" :
                        baseBVValue1 = 5;
                        baseBVValue2 = 5;
                        baseBVValue3 = 20;
                        break;
                    case "4랭크" :
                        baseBVValue1 = 5;
                        baseBVValue2 = 4;
                        baseBVValue3 = 18;
                        break;
                    case "5랭크" :
                        baseBVValue1 = 4;
                        baseBVValue2 = 4;
                        baseBVValue3 = 16;
                        break;
                    case "6랭크" :
                        baseBVValue1 = 4;
                        baseBVValue2 = 4;
                        baseBVValue3 = 14;
                        break;
                    case "7랭크" :
                        baseBVValue1 = 4;
                        baseBVValue2 = 3;
                        baseBVValue3 = 13;
                        break;
                    case "8랭크" :
                        baseBVValue1 = 3;
                        baseBVValue2 = 3;
                        baseBVValue3 = 12;
                        break;
                    case "9랭크" :
                        baseBVValue1 = 3;
                        baseBVValue2 = 3;
                        baseBVValue3 = 11;
                        break;
                    case "A랭크" :
                        baseBVValue1 = 3;
                        baseBVValue2 = 2;
                        baseBVValue3 = 10;
                        break;
                    case "B랭크" :
                        baseBVValue1 = 2;
                        baseBVValue2 = 2;
                        baseBVValue3 = 9;
                        break;
                    case "C랭크" :
                        baseBVValue1 = 2;
                        baseBVValue2 = 2;
                        baseBVValue3 = 8;
                        break;
                    case "D랭크" :
                        baseBVValue1 = 2;
                        baseBVValue2 = 1;
                        baseBVValue3 = 7;
                        break;
                    case "E랭크" :
                        baseBVValue1 = 1;
                        baseBVValue2 = 1;
                        baseBVValue3 = 6;
                        break;
                    case "F랭크" :
                        baseBVValue1 = 1;
                        baseBVValue2 = 0;
                        baseBVValue3 = 5;
                        break;
                    case "연습랭크" :
                        baseBVValue1 = 1;
                        baseBVValue2 = 0;
                        baseBVValue3 = 0;
                        break;
                }
                break;
            case "MC" :
                switch (rank){
                    case "1랭크" :
                        baseMCValue1 = 12;
                        break;
                    case "2랭크" :
                        baseMCValue1 = 10;
                        break;
                    case "3랭크" :
                        baseMCValue1 = 8;
                        break;
                    case "4랭크" :
                        baseMCValue1 = 8;
                        break;
                    case "5랭크" :
                        baseMCValue1 = 7;
                        break;
                    case "6랭크" :
                        baseMCValue1 = 7;
                        break;
                    case "7랭크" :
                        baseMCValue1 = 6;
                        break;
                    case "8랭크" :
                        baseMCValue1 = 6;
                        break;
                    case "9랭크" :
                        baseMCValue1 = 5;
                        break;
                    case "A랭크" :
                        baseMCValue1 = 3;
                        break;
                    case "B랭크" :
                        baseMCValue1 = 3;
                        break;
                    case "C랭크" :
                        baseMCValue1 = 2;
                        break;
                    case "D랭크" :
                        baseMCValue1 = 2;
                        break;
                    case "E랭크" :
                        baseMCValue1 = 1;
                        break;
                    case "F랭크" :
                        baseMCValue1 = 1;
                        break;
                    case "연습랭크" :
                        baseMCValue1 = 1;
                        break;
                }
                break;
            case "SP" :
                switch (rank){
                    case "1랭크" :
                        baseSPValue1 = 11;
                        baseSPValue2 = 5;
                        baseSPValue3 = 410;
                        break;
                    case "2랭크" :
                        baseSPValue1 = 10;
                        baseSPValue2 = 4;
                        baseSPValue3 = 395;
                        break;
                    case "3랭크" :
                        baseSPValue1 = 9;
                        baseSPValue2 = 4;
                        baseSPValue3 = 380;
                        break;
                    case "4랭크" :
                        baseSPValue1 = 9;
                        baseSPValue2 = 3;
                        baseSPValue3 = 365;
                        break;
                    case "5랭크" :
                        baseSPValue1 = 8;
                        baseSPValue2 = 3;
                        baseSPValue3 = 350;
                        break;
                    case "6랭크" :
                        baseSPValue1 = 7;
                        baseSPValue2 = 3;
                        baseSPValue3 = 335;
                        break;
                    case "7랭크" :
                        baseSPValue1 = 7;
                        baseSPValue2 = 2;
                        baseSPValue3 = 320;
                        break;
                    case "8랭크" :
                        baseSPValue1 = 6;
                        baseSPValue2 = 2;
                        baseSPValue3 = 305;
                        break;
                    case "9랭크" :
                        baseSPValue1 = 5;
                        baseSPValue2 = 2;
                        baseSPValue3 = 290;
                        break;
                    case "A랭크" :
                        baseSPValue1 = 4;
                        baseSPValue2 = 1;
                        baseSPValue3 = 275;
                        break;
                    case "B랭크" :
                        baseSPValue1 = 3;
                        baseSPValue2 = 1;
                        baseSPValue3 = 260;
                        break;
                    case "C랭크" :
                        baseSPValue1 = 2;
                        baseSPValue2 = 1;
                        baseSPValue3 = 260;
                        break;
                    case "D랭크" :
                        baseSPValue1 = 2;
                        baseSPValue2 = 1;
                        baseSPValue3 = 230;
                        break;
                    case "E랭크" :
                        baseSPValue1 = 1;
                        baseSPValue2 = 1;
                        baseSPValue3 = 230;
                        break;
                    case "F랭크" :
                        baseSPValue1 = 1;
                        baseSPValue2 = 1;
                        baseSPValue3 = 200;
                        break;
                    case "연습랭크" :
                        baseSPValue1 = 1;
                        baseSPValue2 = 1;
                        baseSPValue3 = 100;
                        break;
                }
                break;
        }
    }
}
