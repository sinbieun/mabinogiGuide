/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.addon.user.myapplication.layout;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.GridLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.addon.user.myapplication.MainActivity;
import com.addon.user.myapplication.R;
import com.addon.user.myapplication.view.NoticeAdapter;
import com.addon.user.myapplication.view.NoticeItem;

import org.w3c.dom.Text;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class MusicLayout extends BaseLinearLayout {
    public LinearLayout layout;
    public MainActivity mainActivity;

    // 랭크 SPINNER
    private Spinner instrumentRankSpinner;
    private Spinner songRankSpinner;
    private Spinner BFRankSpinner;
    private Spinner VVRankSpinner;
    private Spinner BVRankSpinner;
    private Spinner MCRankSpinner;
    private Spinner SPRankSpinner;

    // 랭크 SPINNER DATA ARRAY
    private ArrayAdapter<CharSequence> IRSDataArray;
    private ArrayAdapter<CharSequence> SONGDataArray;
    private ArrayAdapter<CharSequence> BFRDataArray;
    private ArrayAdapter<CharSequence> VVRDataArray;
    private ArrayAdapter<CharSequence> BVRDataArray;
    private ArrayAdapter<CharSequence> MCRDataArray;
    private ArrayAdapter<CharSequence> SPRDataArray;

    // 타이틀 SPINNER
    private Spinner firstTitleSpinner;
    private Spinner secondTitleSpinner;

    // 무기 SPINNER
    private Spinner weaponSelectedSpinner;
    private Spinner weaponInchant1Spinner;
    private Spinner weaponInchant2Spinner;
    private Spinner weaponMusicPlusSpinner;
    private Spinner weaponNMESpinner;
    private Spinner weaponGMESpinner;
    private Spinner weaponBMESpinner;

    // 왼쪽 악세 SPINNER
    private Spinner leftAccessoryInchant1Spinner;
    private Spinner leftAccessoryInchant2Spinner;
    private Spinner leftAccessoryNMESpinner;
    private Spinner leftAccessoryGMESpinner;
    private Spinner leftAccessoryBMESpinner;
    private Spinner leftAccessoryVVMSSpinner;
    private Spinner leftAccessoryVVASSpinner;
    private Spinner leftAccessoryBVGSSpinner;

    // 오른쪽 악세 SPINNER
    private Spinner rightAccessoryInchant1Spinner;
    private Spinner rightAccessoryInchant2Spinner;
    private Spinner rightAccessoryNMESpinner;
    private Spinner rightAccessoryGMESpinner;
    private Spinner rightAccessoryBMESpinner;
    private Spinner rightAccessoryVVMSSpinner;
    private Spinner rightAccessoryVVASSpinner;
    private Spinner rightAccessoryBVGSSpinner;

    // 머리 SPINNER
    // private Spinner headInchant1Spinner;
    private Spinner headInchant2Spinner;

    // 옷 SPINNER
    private Spinner clothInchant1Spinner;

    // 장갑 SPINNER
    private Spinner handClothInchant1Spinner;
    // private Spinner handClothInchant2Spinner;
    private Spinner handClothBVGSSpinner;

    // 신발 SPINNER
    private Spinner shoesInchant1Spinner;
    // private Spinner shoesInchant2Spinner;
    private Spinner shoesVVMSSpinner;
    private Spinner shoesVVASSpinner;

    // 추가 요소 SPINNER
    private Spinner otherGrandMasterSpinner;
    private Spinner otherTrumpetSpinner;
    private Spinner otherPotionSpinner;
    private Spinner otherPartySpinner;
    private Spinner otherEcostoneKeySpinner;
    private Spinner otherEcostoneValueSpinner;

    // TEXTVIEW
    // 전장의 서곡
    private TextView bfValueTextView_1_1;
    private TextView bfValueTextView_2_1;
    private TextView bfValueTextView_3_1;
    private TextView bfValueTextView_1_2;
    private TextView bfValueTextView_2_2;
    private TextView bfValueTextView_3_2;
    private TextView bfValueTextView_1_3;
    private TextView bfValueTextView_2_3;
    private TextView bfValueTextView_3_3;

    // 비바체
    private TextView vvValueTextView_1_1;
    private TextView vvValueTextView_2_1;
    private TextView vvValueTextView_3_1;
    private TextView vvValueTextView_1_2;
    private TextView vvValueTextView_2_2;
    private TextView vvValueTextView_3_2;
    private TextView vvValueTextView_1_3;
    private TextView vvValueTextView_2_3;
    private TextView vvValueTextView_3_3;

    // 풍년가
    private TextView bvValueTextView_1_1;
    private TextView bvValueTextView_2_1;
    private TextView bvValueTextView_3_1;
    private TextView bvValueTextView_1_2;
    private TextView bvValueTextView_2_2;
    private TextView bvValueTextView_3_2;
    private TextView bvValueTextView_1_3;
    private TextView bvValueTextView_2_3;
    private TextView bvValueTextView_3_3;

    // 행진곡
    private TextView mcValueTextView_1_1;
    private TextView mcValueTextView_1_2;
    private TextView mcValueTextView_1_3;

    // 인내의 노래
    private TextView spValueTextView_1_1;
    private TextView spValueTextView_2_1;
    private TextView spValueTextView_3_1;
    private TextView spValueTextView_1_2;
    private TextView spValueTextView_2_2;
    private TextView spValueTextView_3_2;
    private TextView spValueTextView_1_3;
    private TextView spValueTextView_2_3;
    private TextView spValueTextView_3_3;

    // 스킬 랭크에 따른 기본 수치
    // 악기 연주
    private int baseIRSValue = 0;
    // 노래
    private int baseSongValue = 0;
    // 전장의 서곡 ( 최뎀, 민뎀, 크리티컬 )
    private int baseBFValue1 = 0;
    private int baseBFValue2 = 0;
    private int baseBFValue3 = 0;
    // 비바체 ( 마시속, 공속, 연금속 )
    private int baseVVValue1 = 0;
    private int baseVVValue2 = 0;
    private int baseVVValue3 = 0;
    // 풍년가 ( 채집성공, 생산성공, 채집속도 )
    private int baseBVValue1 = 0;
    private int baseBVValue2 = 0;
    private int baseBVValue3 = 0;
    // 행진곡 ( 이동속도 )
    private int baseMCValue1 = 0;
    // 인내의 노래 ( 방어/마방, 보호/마보, 마나/스테 )
    private int baseSPValue1 = 0;
    private int baseSPValue2 = 0;
    private int baseSPValue3 = 0;

    // 처음 시작할때 악연이랑 노래는 실행안하기 위한 구분값
    private boolean isFirstMusic = true;
    private boolean isFirstSong = true;

    // 처음 시작 및 저장 데이터를 주기 위해서 db 호출
    private SQLiteDatabase localDb;

    // 데이터 맵
    private Map<String, String> dataMap = new HashMap<String, String>();

    // 탭
    private LinearLayout tab1Layout;
    private LinearLayout tab2Layout;
    private TextView tab1Button;
    private TextView tab2Button;

    // 현재 탭 레이아웃
    private String currentTabLayout = "tab1";

    // 하이드 버튼 및 레이아웃 세팅
    private ImageView weaponHideButton;
    private GridLayout weaponGridLayout;
    private ImageView rankHideButton;
    private GridLayout rankGridLayout;
    private ImageView titleHideButton;
    private GridLayout titleGridLayout;
    private ImageView leftAccessoryHideButton;
    private GridLayout leftAccessoryGridLayout;
    private ImageView rightAccessoryHideButton;
    private GridLayout rightAccessoryGridLayout;
    private ImageView headHideButton;
    private GridLayout headGridLayout;
    private ImageView clothHideButton;
    private GridLayout clothGridLayout;
    private ImageView handClothHideButton;
    private GridLayout handClothGridLayout;
    private ImageView shoesHideButton;
    private GridLayout shoesGridLayout;
    private ImageView otherHideButton;
    private GridLayout otherGridLayout;

    // 하이드 및 쇼 boolean
    private boolean isWeaponLayoutVisible = true;
    private boolean isRankLayoutVisible = true;
    private boolean isTitleLayoutVisible = true;
    private boolean isLeftAccessoryLayoutVisible = true;
    private boolean isRightAccessoryLayoutVisible = true;
    private boolean isHeadLayoutVisible = true;
    private boolean isClothLayoutVisible = true;
    private boolean isHandClothLayoutVisible = true;
    private boolean isShoesLayoutVisible = true;
    private boolean isOtherLayoutVisible = true;

    public MusicLayout(Context context) {
        super(context);
    }

    public void initialization(Object[] obj) {
        layout = (LinearLayout)getView(R.layout.music_layout);
        addView(layout);

        // 랭크 SPINNER SETTING
        instrumentRankSpinner = layout.findViewById(R.id.instrumentRankSpinner);
        songRankSpinner = layout.findViewById(R.id.songRankSpinner);
        BFRankSpinner = layout.findViewById(R.id.BFRankSpinner);
        VVRankSpinner = layout.findViewById(R.id.VVRankSpinner);
        BVRankSpinner = layout.findViewById(R.id.BVRankSpinner);
        MCRankSpinner = layout.findViewById(R.id.MCRankSpinner);
        SPRankSpinner = layout.findViewById(R.id.SPRankSpinner);

        // 타이틀 SPINNER SETTING
        firstTitleSpinner = layout.findViewById(R.id.firstTitleSpinner);
        secondTitleSpinner = layout.findViewById(R.id.secondTitleSpinner);

        // 무기 SPINNER SETTING
        weaponSelectedSpinner = layout.findViewById(R.id.weaponSelected);
        weaponInchant1Spinner = layout.findViewById(R.id.weaponInchant1);
        weaponInchant2Spinner = layout.findViewById(R.id.weaponInchant2);
        weaponMusicPlusSpinner = layout.findViewById(R.id.weaponMusicPlus);
        weaponNMESpinner = layout.findViewById(R.id.weaponNME);
        weaponGMESpinner = layout.findViewById(R.id.weaponGME);
        weaponBMESpinner = layout.findViewById(R.id.weaponBME);

        // 왼쪽 악세 SPINNER SETTING
        leftAccessoryInchant1Spinner = layout.findViewById(R.id.leftAccessoryInchant1);
        leftAccessoryInchant2Spinner = layout.findViewById(R.id.leftAccessoryInchant2);
        leftAccessoryNMESpinner = layout.findViewById(R.id.leftAccessoryNME);
        leftAccessoryGMESpinner = layout.findViewById(R.id.leftAccessoryGME);
        leftAccessoryBMESpinner = layout.findViewById(R.id.leftAccessoryBME);
        leftAccessoryVVMSSpinner = layout.findViewById(R.id.leftAccessoryVVMS);
        leftAccessoryVVASSpinner = layout.findViewById(R.id.leftAccessoryVVAS);
        leftAccessoryBVGSSpinner = layout.findViewById(R.id.leftAccessoryBVGS);

        // 오른쪽 악세 SPINNER SETTING
        rightAccessoryInchant1Spinner = layout.findViewById(R.id.rightAccessoryInchant1);
        rightAccessoryInchant2Spinner = layout.findViewById(R.id.rightAccessoryInchant2);
        rightAccessoryNMESpinner = layout.findViewById(R.id.rightAccessoryNME);
        rightAccessoryGMESpinner = layout.findViewById(R.id.rightAccessoryGME);
        rightAccessoryBMESpinner = layout.findViewById(R.id.rightAccessoryBME);
        rightAccessoryVVMSSpinner = layout.findViewById(R.id.rightAccessoryVVMS);
        rightAccessoryVVASSpinner = layout.findViewById(R.id.rightAccessoryVVAS);
        rightAccessoryBVGSSpinner = layout.findViewById(R.id.rightAccessoryBVGS);

        // 머리 SPINNER SETTING
        // headInchant1Spinner = layout.findViewById(R.id.headInchant1);
        headInchant2Spinner = layout.findViewById(R.id.headInchant2);

        // 옷 SPINNER SETTING
        clothInchant1Spinner = layout.findViewById(R.id.clothInchant1);

        // 장갑 SPINNER SETTING
        handClothInchant1Spinner = layout.findViewById(R.id.handClothInchant1);
        handClothBVGSSpinner = layout.findViewById(R.id.handClothBVGS);

        // 신발 SPINNER SETTING
        shoesInchant1Spinner = layout.findViewById(R.id.shoesInchant1);
        shoesVVMSSpinner = layout.findViewById(R.id.shoesVVMS);
        shoesVVASSpinner = layout.findViewById(R.id.shoesVVAS);

        otherGrandMasterSpinner = layout.findViewById(R.id.otherGrandMaster);
        otherTrumpetSpinner = layout.findViewById(R.id.otherTrumpet);
        otherPotionSpinner = layout.findViewById(R.id.otherPotion);
        otherPartySpinner = layout.findViewById(R.id.otherParty);
        otherEcostoneKeySpinner = layout.findViewById(R.id.otherEcostoneKey);
        otherEcostoneValueSpinner = layout.findViewById(R.id.otherEcostoneValue);

        // 탭 버튼
        tab1Layout = findViewById(R.id.tab1Layout);
        tab2Layout = findViewById(R.id.tab2Layout);
        tab1Button = findViewById(R.id.tab_1);
        tab2Button = findViewById(R.id.tab_2);

        // 숨기기 버튼 및 레이아웃 세팅
        weaponHideButton = findViewById(R.id.weaponHideButton);
        weaponGridLayout = findViewById(R.id.weaponGridLayout);
        rankHideButton = findViewById(R.id.rankHideButton);
        rankGridLayout = findViewById(R.id.rankGridLayout);
        titleHideButton = findViewById(R.id.titleHideButton);
        titleGridLayout = findViewById(R.id.titleGridLayout);
        leftAccessoryHideButton = findViewById(R.id.leftAccessoryHideButton);
        leftAccessoryGridLayout = findViewById(R.id.leftAccessoryGridLayout);
        rightAccessoryHideButton = findViewById(R.id.rightAccessoryHideButton);
        rightAccessoryGridLayout = findViewById(R.id.rightAccessoryGridLayout);
        headHideButton = findViewById(R.id.headHideButton);
        headGridLayout = findViewById(R.id.headGridLayout);
        clothHideButton = findViewById(R.id.clothHideButton);
        clothGridLayout = findViewById(R.id.clothGridLayout);
        handClothHideButton = findViewById(R.id.handClothHideButton);
        handClothGridLayout = findViewById(R.id.handClothGridLayout);
        shoesHideButton = findViewById(R.id.shoesHideButton);
        shoesGridLayout = findViewById(R.id.shoesGridLayout);
        otherHideButton = findViewById(R.id.otherHideButton);
        otherGridLayout = findViewById(R.id.otherGridLayout);

        // TEXTVIEW
        bfValueTextView_1_1 = findViewById(R.id.bf_value_1_1);
        bfValueTextView_2_1 = findViewById(R.id.bf_value_2_1);
        bfValueTextView_3_1 = findViewById(R.id.bf_value_3_1);
        bfValueTextView_1_2 = findViewById(R.id.bf_value_1_2);
        bfValueTextView_2_2 = findViewById(R.id.bf_value_2_2);
        bfValueTextView_3_2 = findViewById(R.id.bf_value_3_2);
        bfValueTextView_1_3 = findViewById(R.id.bf_value_1_3);
        bfValueTextView_2_3 = findViewById(R.id.bf_value_2_3);
        bfValueTextView_3_3 = findViewById(R.id.bf_value_3_3);

        vvValueTextView_1_1 = findViewById(R.id.vv_value_1_1);
        vvValueTextView_2_1 = findViewById(R.id.vv_value_2_1);
        vvValueTextView_3_1 = findViewById(R.id.vv_value_3_1);
        vvValueTextView_1_2 = findViewById(R.id.vv_value_1_2);
        vvValueTextView_2_2 = findViewById(R.id.vv_value_2_2);
        vvValueTextView_3_2 = findViewById(R.id.vv_value_3_2);
        vvValueTextView_1_3 = findViewById(R.id.vv_value_1_3);
        vvValueTextView_2_3 = findViewById(R.id.vv_value_2_3);
        vvValueTextView_3_3 = findViewById(R.id.vv_value_3_3);

        bvValueTextView_1_1 = findViewById(R.id.bv_value_1_1);
        bvValueTextView_2_1 = findViewById(R.id.bv_value_2_1);
        bvValueTextView_3_1 = findViewById(R.id.bv_value_3_1);
        bvValueTextView_1_2 = findViewById(R.id.bv_value_1_2);
        bvValueTextView_2_2 = findViewById(R.id.bv_value_2_2);
        bvValueTextView_3_2 = findViewById(R.id.bv_value_3_2);
        bvValueTextView_1_3 = findViewById(R.id.bv_value_1_3);
        bvValueTextView_2_3 = findViewById(R.id.bv_value_2_3);
        bvValueTextView_3_3 = findViewById(R.id.bv_value_3_3);

        mcValueTextView_1_1 = findViewById(R.id.mc_value_1_1);
        mcValueTextView_1_2 = findViewById(R.id.mc_value_1_2);
        mcValueTextView_1_3 = findViewById(R.id.mc_value_1_3);

        spValueTextView_1_1 = findViewById(R.id.sp_value_1_1);
        spValueTextView_2_1 = findViewById(R.id.sp_value_2_1);
        spValueTextView_3_1 = findViewById(R.id.sp_value_3_1);
        spValueTextView_1_2 = findViewById(R.id.sp_value_1_2);
        spValueTextView_2_2 = findViewById(R.id.sp_value_2_2);
        spValueTextView_3_2 = findViewById(R.id.sp_value_3_2);
        spValueTextView_1_3 = findViewById(R.id.sp_value_1_3);
        spValueTextView_2_3 = findViewById(R.id.sp_value_2_3);
        spValueTextView_3_3 = findViewById(R.id.sp_value_3_3);

        this.setSpinnerData();
        this.tabButtonSetting();
        this.hideAndShowButtonSetting();
    }

    /**
     * 탭 버튼 세팅
     */
    private void tabButtonSetting(){
        tab1Button.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if(!"tab1".equals(currentTabLayout)){
                    tab1Layout.setVisibility(View.VISIBLE);
                    tab2Layout.setVisibility(View.GONE);

                    tab1Button.setBackgroundResource(R.drawable.tab_background_gradient_selected);
                    tab2Button.setBackgroundResource(R.drawable.tab_background_gradient);

                    tab1Button.setTextColor(Color.parseColor("#FFFFFF"));
                    tab2Button.setTextColor(Color.parseColor("#AAAAAA"));

                    currentTabLayout = "tab1";
                }
            }
        });

        tab2Button.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if(!"tab2".equals(currentTabLayout)) {
                    tab1Layout.setVisibility(View.GONE);
                    tab2Layout.setVisibility(View.VISIBLE);

                    tab1Button.setBackgroundResource(R.drawable.tab_background_gradient);
                    tab2Button.setBackgroundResource(R.drawable.tab_background_gradient_selected);

                    tab1Button.setTextColor(Color.parseColor("#AAAAAA"));
                    tab2Button.setTextColor(Color.parseColor("#FFFFFF"));

                    setFinishValue();

                    currentTabLayout = "tab2";
                }
            }
        });
    }

    /**
     * 하이드 및 쇼 버튼 세팅
     */
    private void hideAndShowButtonSetting() {

        weaponHideButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if(isWeaponLayoutVisible){
                    weaponGridLayout.setVisibility(View.GONE);
                    isWeaponLayoutVisible = false;
                    weaponHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));
                }else{
                    weaponGridLayout.setVisibility(View.VISIBLE);
                    isWeaponLayoutVisible = true;
                    weaponHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_minus));
                }
            }
        });

        rankHideButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if(isRankLayoutVisible){
                    rankGridLayout.setVisibility(View.GONE);
                    isRankLayoutVisible = false;
                    rankHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));
                }else{
                    rankGridLayout.setVisibility(View.VISIBLE);
                    isRankLayoutVisible = true;
                    rankHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_minus));
                }
            }
        });

        titleHideButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if(isTitleLayoutVisible){
                    titleGridLayout.setVisibility(View.GONE);
                    isTitleLayoutVisible = false;
                    titleHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));
                }else{
                    titleGridLayout.setVisibility(View.VISIBLE);
                    isTitleLayoutVisible = true;
                    titleHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_minus));
                }
            }
        });

        leftAccessoryHideButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if(isLeftAccessoryLayoutVisible){
                    leftAccessoryGridLayout.setVisibility(View.GONE);
                    isLeftAccessoryLayoutVisible = false;
                    leftAccessoryHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));
                }else{
                    leftAccessoryGridLayout.setVisibility(View.VISIBLE);
                    isLeftAccessoryLayoutVisible = true;
                    leftAccessoryHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_minus));
                }
            }
        });

        rightAccessoryHideButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if(isRightAccessoryLayoutVisible){
                    rightAccessoryGridLayout.setVisibility(View.GONE);
                    isRightAccessoryLayoutVisible = false;
                    rightAccessoryHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));
                }else{
                    rightAccessoryGridLayout.setVisibility(View.VISIBLE);
                    isRightAccessoryLayoutVisible = true;
                    rightAccessoryHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_minus));
                }
            }
        });

        headHideButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if(isHeadLayoutVisible){
                    headGridLayout.setVisibility(View.GONE);
                    isHeadLayoutVisible = false;
                    headHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));
                }else{
                    headGridLayout.setVisibility(View.VISIBLE);
                    isHeadLayoutVisible = true;
                    headHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_minus));
                }
            }
        });

        clothHideButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if(isClothLayoutVisible){
                    clothGridLayout.setVisibility(View.GONE);
                    isClothLayoutVisible = false;
                    clothHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));
                }else{
                    clothGridLayout.setVisibility(View.VISIBLE);
                    isClothLayoutVisible = true;
                    clothHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_minus));
                }
            }
        });

        handClothHideButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if(isHandClothLayoutVisible){
                    handClothGridLayout.setVisibility(View.GONE);
                    isHandClothLayoutVisible = false;
                    handClothHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));
                }else{
                    handClothGridLayout.setVisibility(View.VISIBLE);
                    isHandClothLayoutVisible = true;
                    handClothHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_minus));
                }
            }
        });

        shoesHideButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if(isShoesLayoutVisible){
                    shoesGridLayout.setVisibility(View.GONE);
                    isShoesLayoutVisible = false;
                    shoesHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));
                }else{
                    shoesGridLayout.setVisibility(View.VISIBLE);
                    isShoesLayoutVisible = true;
                    shoesHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_minus));
                }
            }
        });

        otherHideButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if(isOtherLayoutVisible){
                    otherGridLayout.setVisibility(View.GONE);
                    isOtherLayoutVisible = false;
                    otherHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_plus));
                }else{
                    otherGridLayout.setVisibility(View.VISIBLE);
                    isOtherLayoutVisible = true;
                    otherHideButton.setImageDrawable(getResources().getDrawable(R.drawable.icon_minus));
                }
            }
        });
    }

    /**
     * SPINNER 데이터 세팅
     */
    public void setSpinnerData(){
        //************************ 랭크 시작 ************************/
        // 악기 연주 랭크
        // instrumentRankSpinner.setPrompt("출발 마을을 선택하시오.");
        IRSDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        IRSDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        instrumentRankSpinner.setAdapter(IRSDataArray);
        instrumentRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("IRS", IRSDataArray.getItem(i).toString());
                if(!isFirstMusic) {
                    setUpdateData("instrumentRank", String.valueOf(i));
                }else{
                    isFirstMusic = false;
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        // 노래 랭크
        SONGDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        SONGDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        songRankSpinner.setAdapter(SONGDataArray);
        songRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("SONG", SONGDataArray.getItem(i).toString());

                if(!isFirstSong) {
                    setUpdateData("songRank", String.valueOf(i));
                }else{
                    isFirstSong = false;
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        // 전장의 서곡 랭크
        BFRDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        BFRDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        BFRankSpinner.setAdapter(BFRDataArray);
        BFRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("BF", BFRDataArray.getItem(i).toString());
                setUpdateData("BFRank", String.valueOf(i));
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        // 비바체 랭크
        VVRDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        VVRDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        VVRankSpinner.setAdapter(VVRDataArray);
        VVRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("VV", VVRDataArray.getItem(i).toString());
                setUpdateData("VVRank", String.valueOf(i));
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        // 풍년가 랭크
        BVRDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        BVRDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        BVRankSpinner.setAdapter(BVRDataArray);
        BVRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("BV", BVRDataArray.getItem(i).toString());
                setUpdateData("BVRank", String.valueOf(i));
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        // 행진곡 랭크
        MCRDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        MCRDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        MCRankSpinner.setAdapter(MCRDataArray);
        MCRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("MC", MCRDataArray.getItem(i).toString());
                setUpdateData("MCRank", String.valueOf(i));
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        // 인내의 노래 랭크
        SPRDataArray = ArrayAdapter.createFromResource(context, R.array.masterySelected, R.layout.support_simple_spinner_dropdown_item);
        SPRDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        SPRankSpinner.setAdapter(SPRDataArray);
        SPRankSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setBaseValueFromRank("SP", SPRDataArray.getItem(i).toString());
                setUpdateData("SPRank", String.valueOf(i));
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });
        //************************ 랭크 종료 ************************/

        //************************ 타이틀 시작 ************************/
        // 1차 타이틀
        setSpinnerView(firstTitleSpinner, R.array.musicFirstTitleArray, "firstTitleSpinner");
        // 2차 타이틀
        setSpinnerView(secondTitleSpinner, R.array.musicSecondTitleArray, "secondTitleSpinner");
        //************************ 타이틀 종료 ************************/

        //************************ 무기 시작 ************************/
        // 무기 종류
        setSpinnerView(weaponSelectedSpinner, R.array.musicWeaponArray, "weaponSelectedSpinner");
        // 접두 인챈트
        setSpinnerView(weaponInchant1Spinner, R.array.musicInchantForWeapon1, "weaponInchant1Spinner");
        // 접미 인챈트
        setSpinnerView(weaponInchant2Spinner, R.array.musicInchantForWeapon2, "weaponInchant2Spinner");
        // 무기 악기 효과 세공
        setSpinnerView(weaponMusicPlusSpinner, R.array.workmangshipSelectedFor20, "weaponMusicPlusSpinner");
        // 보통 연주
        setSpinnerView(weaponNMESpinner, R.array.workmangshipSelectedFor10, "weaponNMESpinner");
        // 훌륭한 연주
        setSpinnerView(weaponGMESpinner, R.array.workmangshipSelectedFor10, "weaponGMESpinner");
        // 신들린 연주
        setSpinnerView(weaponBMESpinner, R.array.workmangshipSelectedFor10, "weaponBMESpinner");

        //************************ 무기 종료 ************************/

        //************************ 왼쪽 악세 시작 ************************/
        // 접두 인챈트
        setSpinnerView(leftAccessoryInchant1Spinner, R.array.musicInchantForAccessory1, "leftAccessoryInchant1Spinner");
        // 접미 인챈트
        setSpinnerView(leftAccessoryInchant2Spinner, R.array.musicInchantForAccessory2, "leftAccessoryInchant2Spinner");
        // 보통 연주
        setSpinnerView(leftAccessoryNMESpinner, R.array.workmangshipSelectedFor3, "leftAccessoryNMESpinner");
        // 훌륭한 연주
        setSpinnerView(leftAccessoryGMESpinner, R.array.workmangshipSelectedFor3, "leftAccessoryGMESpinner");
        // 신들린 연주
        setSpinnerView(leftAccessoryBMESpinner, R.array.workmangshipSelectedFor3, "leftAccessoryBMESpinner");
        // 마법 시전 속도
        setSpinnerView(leftAccessoryVVMSSpinner, R.array.workmangshipSelectedFor3, "leftAccessoryVVMSSpinner");
        // 공격 속도
        setSpinnerView(leftAccessoryVVASSpinner, R.array.workmangshipSelectedFor3, "leftAccessoryVVASSpinner");
        // 풍년가 채집 속도
        setSpinnerView(leftAccessoryBVGSSpinner, R.array.workmangshipSelectedFor3, "leftAccessoryBVGSSpinner");
        //************************ 왼쪽 악세 종료 ************************/

        //************************ 오른쪽 악세 시작 ************************/
        // 접두 인챈트
        setSpinnerView(rightAccessoryInchant1Spinner, R.array.musicInchantForAccessory1, "rightAccessoryInchant1Spinner");
        // 접미 인챈트
        setSpinnerView(rightAccessoryInchant2Spinner, R.array.musicInchantForAccessory2, "rightAccessoryInchant2Spinner");
        // 보통 연주
        setSpinnerView(rightAccessoryNMESpinner, R.array.workmangshipSelectedFor3, "rightAccessoryNMESpinner");
        // 훌륭한 연주
        setSpinnerView(rightAccessoryGMESpinner, R.array.workmangshipSelectedFor3, "rightAccessoryGMESpinner");
        // 신들린 연주
        setSpinnerView(rightAccessoryBMESpinner, R.array.workmangshipSelectedFor3, "rightAccessoryBMESpinner");
        // 마법 시전 속도
        setSpinnerView(rightAccessoryVVMSSpinner, R.array.workmangshipSelectedFor3, "rightAccessoryVVMSSpinner");
        // 공격 속도
        setSpinnerView(rightAccessoryVVASSpinner, R.array.workmangshipSelectedFor3, "rightAccessoryVVASSpinner");
        // 풍년가 채집 속도
        setSpinnerView(rightAccessoryBVGSSpinner, R.array.workmangshipSelectedFor3, "rightAccessoryBVGSSpinner");
        //************************ 오른쪽 악세 종료 ************************/

        //************************ 머리 시작 ************************/
        // 접미 인챈트
        setSpinnerView(headInchant2Spinner, R.array.musicInchantForHead, "headInchant2Spinner");
        //************************ 머리 종료 ************************/

        //************************ 옷 시작 ************************/
        // 접두 인챈트
        setSpinnerView(clothInchant1Spinner, R.array.musicInchantForCloth1, "clothInchant1Spinner");
        //************************ 옷 종료 ************************/

        //************************ 장갑 시작 ************************/
        // 접두 인챈트
        setSpinnerView(handClothInchant1Spinner, R.array.musicInchantForShoes, "handClothInchant1Spinner");
        // 풍년가 채집 속도
        setSpinnerView(handClothBVGSSpinner, R.array.workmangshipSelectedFor3, "handClothBVGSSpinner");
        //************************ 장갑 종료 ************************/

        //************************ 신발 시작 ************************/
        // 접두 인챈트
        setSpinnerView(shoesInchant1Spinner, R.array.musicInchantForShoes, "shoesInchant1Spinner");
        // 마법 시전 속도
        setSpinnerView(shoesVVMSSpinner, R.array.workmangshipSelectedFor3, "shoesVVMSSpinner");
        // 비바체 공격 속도
        setSpinnerView(shoesVVASSpinner, R.array.workmangshipSelectedFor3, "shoesVVASSpinner");
        //************************ 신발 종료 ************************/

        //************************ 추가요소 시작 ************************/
        setSpinnerView(otherGrandMasterSpinner, R.array.isUseArray, "otherGrandMasterSpinner");
        setSpinnerView(otherTrumpetSpinner, R.array.isUseArray, "otherTrumpetSpinner");
        setSpinnerView(otherPotionSpinner, R.array.isUseArray, "otherPotionSpinner");
        setSpinnerView(otherPartySpinner, R.array.musicParty, "otherPartySpinner");
        setSpinnerViewForEcostone(otherEcostoneKeySpinner, R.array.musicEcostoneKeyArray, "otherEcostoneKeySpinner");
        setSpinnerView(otherEcostoneValueSpinner, R.array.workmangshipSelectedFor0, "otherEcostoneValueSpinner");
        //************************ 추가종료 시작 ************************/
    }

    /**
     * 입력되어 있는 데이터 가져오기
     * @param db
     * @param obj
     */
    public void setData(SQLiteDatabase db, Object[] obj) {
        localDb = db;

        // DB SELECT
        String sql = "SELECT keyName, keyContent FROM LOCALDATATABLE WHERE useLayout = 'MUSIC'";
        Cursor cursor = localDb.rawQuery(sql, null);

        while(cursor.moveToNext()) {
            String keyName = cursor.getString(0);
            String keyContent = cursor.getString(1);

            setDataFromKey(keyName, keyContent);
        }
    }

    /**
     * Key 정보를 받아서 레이아웃 세팅
     * @param keyName
     * @param keyContent
     */
    private void setDataFromKey(String keyName, String keyContent){
        switch (keyName){
            case "instrumentRank" :
                instrumentRankSpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "songRank" :
                songRankSpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "BFRank" :
                BFRankSpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "VVRank" :
                VVRankSpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "BVRank" :
                BVRankSpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "MCRank" :
                MCRankSpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "SPRank" :
                SPRankSpinner.setSelection(Integer.parseInt(keyContent));
                break;
            // 타이틀 SPINNER SETTING
            case "firstTitleSpinner" :
                firstTitleSpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "secondTitleSpinner" :
                secondTitleSpinner.setSelection(Integer.parseInt(keyContent));
                break;

            case "weaponSelectedSpinner" :
                weaponSelectedSpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "weaponInchant1Spinner" :
                weaponInchant1Spinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "weaponInchant2Spinner" :
                weaponInchant2Spinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "weaponMusicPlusSpinner" :
                weaponMusicPlusSpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "weaponNMESpinner" :
                weaponNMESpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "weaponGMESpinner" :
                weaponGMESpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "weaponBMESpinner" :
                weaponBMESpinner.setSelection(Integer.parseInt(keyContent));
            break;

            // 왼쪽 악세 SPINNER SETTING
            case "leftAccessoryInchant1Spinner" :
                leftAccessoryInchant1Spinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "leftAccessoryInchant2Spinner" :
                leftAccessoryInchant2Spinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "leftAccessoryNMESpinner" :
                leftAccessoryNMESpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "leftAccessoryGMESpinner" :
                leftAccessoryGMESpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "leftAccessoryBMESpinner" :
                leftAccessoryBMESpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "leftAccessoryVVMSSpinner" :
                leftAccessoryVVMSSpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "leftAccessoryVVASSpinner" :
                leftAccessoryVVASSpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "leftAccessoryBVGSSpinner" :
                leftAccessoryBVGSSpinner.setSelection(Integer.parseInt(keyContent));
                break;

            // 오른쪽 악세 SPINNER SETTING
            case "rightAccessoryInchant1Spinner" :
                rightAccessoryInchant1Spinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "rightAccessoryInchant2Spinner" :
                rightAccessoryInchant2Spinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "rightAccessoryNMESpinner" :
                rightAccessoryNMESpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "rightAccessoryGMESpinner" :
                rightAccessoryGMESpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "rightAccessoryBMESpinner" :
                rightAccessoryBMESpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "rightAccessoryVVMSSpinner" :
                rightAccessoryVVMSSpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "rightAccessoryVVASSpinner" :
                rightAccessoryVVASSpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "rightAccessoryBVGSSpinner" :
                rightAccessoryBVGSSpinner.setSelection(Integer.parseInt(keyContent));
                break;

            // 머리 SPINNER SETTING
            // headInchant1Spinner
            case "headInchant2Spinner" :
                headInchant2Spinner.setSelection(Integer.parseInt(keyContent));
                break;

            // 옷 SPINNER SETTING
            case "clothInchant1Spinner" :
                clothInchant1Spinner.setSelection(Integer.parseInt(keyContent));
                break;

            // 장갑 SPINNER SETTING
            case "handClothInchant1Spinner" :
                handClothInchant1Spinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "handClothBVGSSpinner" :
                handClothBVGSSpinner.setSelection(Integer.parseInt(keyContent));
                break;

            // 신발 SPINNER SETTING
            case "shoesInchant1Spinner" :
                shoesInchant1Spinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "shoesVVMSSpinner" :
                shoesVVMSSpinner.setSelection(Integer.parseInt(keyContent));
                break;
            case "shoesVVASSpinner" :
                shoesVVASSpinner.setSelection(Integer.parseInt(keyContent));
                break;

            case "otherGrandMasterSpinner" :
                otherGrandMasterSpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "otherTrumpetSpinner" :
                otherTrumpetSpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "otherPotionSpinner" :
                otherPotionSpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "otherPartySpinner" :
                otherPartySpinner.setSelection(Integer.parseInt(keyContent));
            break;
            case "otherEcostoneKeySpinner" :
                otherEcostoneKeySpinner.setSelection(Integer.parseInt(keyContent));
            break;
            //case "otherEcostoneValueSpinner" :
            //    otherEcostoneValueSpinner.setSelection(Integer.parseInt(keyContent));
            //break;
        }
    }

    /**
     * 로컬 데이터 변경해주기
     * @param keyName
     * @param keyContent
     */
    private void setUpdateData(String keyName, String keyContent){
        localDb.execSQL("UPDATE LOCALDATATABLE SET keyContent = '" + keyContent + "' WHERE useLayout = 'MUSIC' AND keyName = '" + keyName + "';");
    }
    
    public void setData(Object[] obj) {
    }

    private void setFinishValue(){
        // PARAMETER
        // DATA
        int musicPlusCountInt = 0;             // 악기연주 최종 결과
        int BFCountInt = 0;                    // 전장의 서곡 최종
        int VVCountInt = 0;                    // 비바체 최종
        int BYCountInt = 0;                    // 풍년가 최종
        int MCCountInt = 0;                    // 행진곡 최종
        int SPCountInt = 0;                    // 인내의 노래 최종

        int musicParty = 0;                    // 파티원 수

        // 기본 : 스킬효과 * ( 1 + ( 세공vs에코스톤(연주) ) / 100 ) * ( 100 + 악기연주효과 ) / 10000
        // 보연은 기본 + 0
        // 훌연은 기본 + 10
        // 신들은 기본 + 30

        // 1차 타이틀 계산
        if(dataMap.containsKey("firstTitleSpinner")){
            switch(dataMap.get("firstTitleSpinner")){
                case "없음" :
                    musicPlusCountInt += 0;
                    break;
                case "전장의 서곡 마스터" :
                    BFCountInt += 8;
                    break;
                case "비바체 마스터" :
                    VVCountInt += 10;
                    break;
                case "풍년가 마스터" :
                    BYCountInt += 10;
                    break;
                case "행진곡 마스터" :
                    MCCountInt += 10;
                    break;
                case "인내의 노래 마스터" :
                    SPCountInt += 10;
                    break;
                case "마에스트로" :
                    musicPlusCountInt += 5;
                    break;
            }
        }

        // 2차 타이틀 계산
        if(dataMap.containsKey("secondTitleSpinner")){
            switch(dataMap.get("secondTitleSpinner")){
                case "포르티시모" :
                    musicPlusCountInt += 9;
                    break;
                case "포르테" :
                    musicPlusCountInt += 8;
                    break;
                case "디바" :
                    musicPlusCountInt += 8;
                    break;
                case "이보나" :
                    musicPlusCountInt += 8;
                    break;
                case "피아니시모" :
                    musicPlusCountInt += 7;
                    break;
                case "붉은빛오로라" :
                    musicPlusCountInt += 3;
                    break;
                case "푸른빛오로라" :
                    musicPlusCountInt += 3;
                    break;
                case "만렙" :
                    musicPlusCountInt += 4;
                    break;
                case "카가미네 린" :
                    musicPlusCountInt += 3;
                    break;
                case "카가미네 렌" :
                    musicPlusCountInt += 3;
                    break;
                case "카이토" :
                    musicPlusCountInt += 3;
                    break;
                case "하츠네 미쿠" :
                    musicPlusCountInt += 3;
                    break;
                case "무지개빛 오로라" :
                    musicPlusCountInt += 2;
                    break;
                case "11주년 판파" :
                    musicPlusCountInt += 2;
                    break;
                case "에피" :
                    musicPlusCountInt += 2;
                    break;
                case "일라" :
                    musicPlusCountInt += 2;
                    break;
                case "하멜른" :
                    musicPlusCountInt += 2;
                    break;
            }
        }

        // 무기
        if(dataMap.containsKey("weaponSelectedSpinner")){
            switch (dataMap.get("weaponSelectedSpinner")){
                case "글루미" :
                    musicPlusCountInt += 15;
                    break;
                case "리라" :
                    musicPlusCountInt += 11;
                    break;
                case "바이올린" :
                    musicPlusCountInt += 11;
                    break;
            }
        }

        // 인챈트
        if(dataMap.containsKey("weaponInchant1Spinner")){
            musicPlusCountInt += setValueFromInchant(dataMap.get("weaponInchant1Spinner"));
        }
        if(dataMap.containsKey("weaponInchant2Spinner")){
            musicPlusCountInt += setValueFromInchant(dataMap.get("weaponInchant2Spinner"));
        }
        if(dataMap.containsKey("leftAccessoryInchant1Spinner")){
            musicPlusCountInt += setValueFromInchant(dataMap.get("leftAccessoryInchant1Spinner"));
        }
        if(dataMap.containsKey("leftAccessoryInchant2Spinner")){
            musicPlusCountInt += setValueFromInchant(dataMap.get("leftAccessoryInchant2Spinner"));
        }
        if(dataMap.containsKey("rightAccessoryInchant1Spinner")){
            musicPlusCountInt += setValueFromInchant(dataMap.get("rightAccessoryInchant1Spinner"));
        }
        if(dataMap.containsKey("rightAccessoryInchant2Spinner")){
            musicPlusCountInt += setValueFromInchant(dataMap.get("rightAccessoryInchant2Spinner"));
        }
        if(dataMap.containsKey("headInchant2Spinner")){
            musicPlusCountInt += setValueFromInchant(dataMap.get("headInchant2Spinner"));
        }
        if(dataMap.containsKey("clothInchant1Spinner")){
            musicPlusCountInt += setValueFromInchant(dataMap.get("clothInchant1Spinner"));
        }
        if(dataMap.containsKey("handClothInchant1Spinner")){
            musicPlusCountInt += setValueFromInchant(dataMap.get("handClothInchant1Spinner"));
        }
        if(dataMap.containsKey("shoesInchant1Spinner")){
            musicPlusCountInt += setValueFromInchant(dataMap.get("shoesInchant1Spinner"));
        }

        // 세공 vs 에코스톤 해줘야함
        int workManVsEcostoneNME = 0;               // 보연 ( 악세 2개, 무기 )
        int workManVsEcostoneGME = 0;               // 훌연 ( 악세 2개, 무기 )
        int workManVsEcostoneBME = 0;               // 신들 ( 악세 2개, 무기 )
        int workManVsEcostoneVVMS = 0;              // 마시속 ( 악세 2개, 발 )
        int workManVsEcostoneVVAS = 0;              // 비바공속 ( 악세 2개 )
        int workManVsEcostoneBVGS = 0;              // 풍년채속 ( 악세 2개, 장갑 )
        int workManVsEcostoneME = 0;                // 악효 ( 무기 )

        // 우선 세공을 모두 넣어줌
        // ============ 악효 시작 ============
        if(dataMap.containsKey("weaponMusicPlusSpinner")){
            workManVsEcostoneME += Integer.parseInt(dataMap.get("weaponMusicPlusSpinner").replace("레벨",""));
        }
        // ============ 악효 종료 ============
        // ============ 보연 시작 ============
        if(dataMap.containsKey("leftAccessoryNMESpinner")){
            workManVsEcostoneNME += Integer.parseInt(dataMap.get("leftAccessoryNMESpinner").replace("레벨",""));
        }
        if(dataMap.containsKey("rightAccessoryNMESpinner")){
            workManVsEcostoneNME += Integer.parseInt(dataMap.get("rightAccessoryNMESpinner").replace("레벨",""));
        }
        if(dataMap.containsKey("weaponNMESpinner")){
            workManVsEcostoneNME += Integer.parseInt(dataMap.get("weaponNMESpinner").replace("레벨",""));
        }
        // ============ 보연 종료 ============
        // ============ 훌연 시작 ============
        if(dataMap.containsKey("leftAccessoryGMESpinner")){
            workManVsEcostoneGME += Integer.parseInt(dataMap.get("leftAccessoryGMESpinner").replace("레벨",""));
        }
        if(dataMap.containsKey("rightAccessoryGMESpinner")){
            workManVsEcostoneGME += Integer.parseInt(dataMap.get("rightAccessoryGMESpinner").replace("레벨",""));
        }
        if(dataMap.containsKey("weaponGMESpinner")){
            workManVsEcostoneGME += Integer.parseInt(dataMap.get("weaponGMESpinner").replace("레벨",""));
        }
        // ============ 훌연 종료 ============
        // ============ 신들 시작 ============
        if(dataMap.containsKey("leftAccessoryBMESpinner")){
            workManVsEcostoneBME += Integer.parseInt(dataMap.get("leftAccessoryBMESpinner").replace("레벨",""));
        }
        if(dataMap.containsKey("rightAccessoryBMESpinner")){
            workManVsEcostoneBME += Integer.parseInt(dataMap.get("rightAccessoryBMESpinner").replace("레벨",""));
        }
        if(dataMap.containsKey("weaponBMESpinner")){
            workManVsEcostoneBME += Integer.parseInt(dataMap.get("weaponBMESpinner").replace("레벨",""));
        }
        // ============ 신들 종료 ============
        // ============ 마시속 시작 ============
        if(dataMap.containsKey("leftAccessoryVVMSSpinner")){
            workManVsEcostoneVVMS += Integer.parseInt(dataMap.get("leftAccessoryVVMSSpinner").replace("레벨",""));
        }
        if(dataMap.containsKey("rightAccessoryVVMSSpinner")){
            workManVsEcostoneVVMS += Integer.parseInt(dataMap.get("rightAccessoryVVMSSpinner").replace("레벨",""));
        }
        if(dataMap.containsKey("shoesVVMSSpinner")){
            workManVsEcostoneVVMS += Integer.parseInt(dataMap.get("shoesVVMSSpinner").replace("레벨",""));
        }
        // ============ 마시속 종료 ============
        // ============ 비바공속 시작 ============
        if(dataMap.containsKey("leftAccessoryVVASSpinner")){
            workManVsEcostoneVVAS += Integer.parseInt(dataMap.get("leftAccessoryVVASSpinner").replace("레벨",""));
        }
        if(dataMap.containsKey("rightAccessoryVVASSpinner")){
            workManVsEcostoneVVAS += Integer.parseInt(dataMap.get("rightAccessoryVVASSpinner").replace("레벨",""));
        }
        if(dataMap.containsKey("shoesVVASSpinner")){
            workManVsEcostoneVVAS += Integer.parseInt(dataMap.get("shoesVVASSpinner").replace("레벨",""));
        }
        // ============ 비바공속 종료 ============
        // ============ 풍년채속 시작 ============
        if(dataMap.containsKey("leftAccessoryBVGSSpinner")){
            workManVsEcostoneBVGS += Integer.parseInt(dataMap.get("leftAccessoryBVGSSpinner").replace("레벨",""));
        }
        if(dataMap.containsKey("rightAccessoryBVGSSpinner")){
            workManVsEcostoneBVGS += Integer.parseInt(dataMap.get("rightAccessoryBVGSSpinner").replace("레벨",""));
        }
        if(dataMap.containsKey("handClothBVGSSpinner")){
            workManVsEcostoneBVGS += Integer.parseInt(dataMap.get("handClothBVGSSpinner").replace("레벨",""));
        }
        // ============ 풍년채속 종료 ============

        // ============ 세공 vs 에코스톤 비교 시작 ============
        if(dataMap.containsKey("otherEcostoneKeySpinner") && dataMap.containsKey("otherEcostoneKeySpinner")) {
            int otherEcostoneValue = Integer.parseInt(dataMap.get("otherEcostoneValueSpinner").replace("레벨",""));
            switch (dataMap.get("otherEcostoneKeySpinner")) {
                case "악기 연주 효과":
                    if(otherEcostoneValue > workManVsEcostoneME){
                        workManVsEcostoneME = otherEcostoneValue;
                    }
                    break;
                case "보통 연주 효과":
                    if(otherEcostoneValue > workManVsEcostoneNME){
                        workManVsEcostoneNME = otherEcostoneValue;
                    }
                    break;
                case "훌륭한 연주 효과":
                    if(otherEcostoneValue > workManVsEcostoneGME){
                        workManVsEcostoneGME = otherEcostoneValue;
                    }
                    break;
                case "신들린 연주 효과":
                    if(otherEcostoneValue > workManVsEcostoneBME){
                        workManVsEcostoneBME = otherEcostoneValue;
                    }
                    break;
                case "비바체 마시속":
                    if(otherEcostoneValue > workManVsEcostoneVVMS){
                        workManVsEcostoneVVMS = otherEcostoneValue;
                    }
                    break;
                case "비바체 공속":
                    if(otherEcostoneValue > workManVsEcostoneVVAS){
                        workManVsEcostoneVVAS = otherEcostoneValue;
                    }
                    break;
                case "풍년가 채집속도":
                    if(otherEcostoneValue > workManVsEcostoneBVGS){
                        workManVsEcostoneBVGS = otherEcostoneValue;
                    }
                    break;
            }
        }
        // ============ 세공 vs 에코스톤 종료 시작 ============

        // *************************** 추가 요소
        // 그랜드마스터
        if(dataMap.containsKey("otherGrandMasterSpinner")){
            if("사용".equals(dataMap.get("otherGrandMasterSpinner"))){
                musicPlusCountInt += 5;
            }
        }
        // 코르플레 나팔 보너스
        if(dataMap.containsKey("otherTrumpetSpinner")){
            if("사용".equals(dataMap.get("otherTrumpetSpinner"))){
                musicPlusCountInt += 3;
            }
        }
        // 음악 부스트 보너스
        if(dataMap.containsKey("otherPotionSpinner")){
            if("사용".equals(dataMap.get("otherPotionSpinner"))){
                musicPlusCountInt += 2;
            }
        }
        // 파티원수 보너스
        if(dataMap.containsKey("otherPartySpinner")){
            musicParty += Integer.parseInt(dataMap.get("otherPartySpinner").replace("명","")) * 3;
        }

        // 보통 연주
        int normalMusicInt = workManVsEcostoneNME;

        // 훌륭한 연주
        int greatMusicInt = workManVsEcostoneGME + 10;

        // 신들린 연주
        int bestMusicInt = workManVsEcostoneBME + 30;

        // 악기 연주 랭크 + 노래 랭크 + 악기 연주 효과
        int musicEffectFromRankInt = baseIRSValue + baseSongValue + musicPlusCountInt + workManVsEcostoneME;

        // (악기 연주 랭크 + 노래 랭크 + 악기 연주 효과) + 전장의 서곡 효과
        int musicEffectForBFInt = musicEffectFromRankInt + BFCountInt;

        // (악기 연주 랭크 + 노래 랭크 + 악기 연주 효과) + 비바체 효과
        int musicEffectForVVInt = musicEffectFromRankInt + VVCountInt;
        int musicEffectForVVMSInt = musicEffectForVVInt + workManVsEcostoneVVMS;
        int musicEffectForVVASInt = musicEffectForVVInt + workManVsEcostoneVVAS;

        // (악기 연주 랭크 + 노래 랭크 + 악기 연주 효과) + 풍년가 효과
        int musicEffectForBVInt = musicEffectFromRankInt + BYCountInt;

        // (악기 연주 랭크 + 노래 랭크 + 악기 연주 효과) + 행진곡 효과
        int musicEffectForMCInt = musicEffectFromRankInt + MCCountInt;

        // (악기 연주 랭크 + 노래 랭크 + 악기 연주 효과) + 인내의 노래 효과
        int musicEffectForSPInt = musicEffectFromRankInt + SPCountInt;

        //****************** 전장의 서곡 보통 연주 START ******************/
        float bfValue1_1 = baseBFValue1 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        bfValueTextView_1_1.setText(String.format("%.2f", bfValue1_1));

        float bfValue2_1 = baseBFValue2 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        bfValueTextView_2_1.setText(String.format("%.2f", bfValue2_1));

        float bfValue3_1 = baseBFValue3 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        bfValueTextView_3_1.setText(String.format("%.2f", bfValue3_1));
        //****************** 전장의 서곡 보통 연주 END ******************/

        //****************** 전장의 서곡 훌륭한 연주 START ******************/
        float bfValue1_2 = baseBFValue1 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        bfValueTextView_1_2.setText(String.format("%.2f", bfValue1_2));

        float bfValue2_2 = baseBFValue2 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        bfValueTextView_2_2.setText(String.format("%.2f", bfValue2_2));

        float bfValue3_2 = baseBFValue3 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        bfValueTextView_3_2.setText(String.format("%.2f", bfValue3_2));
        //****************** 전장의 서곡 훌륭한 연주 END ******************/

        //****************** 전장의 서곡 신들린 연주 START ******************/
        float bfValue1_3 = baseBFValue1 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        bfValueTextView_1_3.setText(String.format("%.2f", bfValue1_3));

        float bfValue2_3 = baseBFValue2 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        bfValueTextView_2_3.setText(String.format("%.2f", bfValue2_3));

        float bfValue3_3 = baseBFValue3 * ( 100 + musicEffectForBFInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        bfValueTextView_3_3.setText(String.format("%.2f", bfValue3_3));
        //****************** 전장의 서곡 신들린 연주 END ******************/

        //****************** 비바체 보통 연주 START ******************/
        float vvValue1_1 = baseVVValue1 * ( 100 + musicEffectForVVMSInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        vvValueTextView_1_1.setText(String.format("%.2f", vvValue1_1));

        float vvValue2_1 = baseVVValue2 * ( 100 + musicEffectForVVASInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        vvValueTextView_2_1.setText(String.format("%.2f", vvValue2_1));

        float vvValue3_1 = baseVVValue3 * ( 100 + musicEffectForVVInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        vvValueTextView_3_1.setText(String.format("%.2f", vvValue3_1));
        //****************** 비바체 보통 연주 END ******************/

        //****************** 비바체 훌륭한 연주 START ******************/
        float vvValue1_2 = baseVVValue1 * ( 100 + musicEffectForVVMSInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        vvValueTextView_1_2.setText(String.format("%.2f", vvValue1_2));

        float vvValue2_2 = baseVVValue2 * ( 100 + musicEffectForVVASInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        vvValueTextView_2_2.setText(String.format("%.2f", vvValue2_2));

        float vvValue3_2 = baseVVValue3 * ( 100 + musicEffectForVVInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        vvValueTextView_3_2.setText(String.format("%.2f", vvValue3_2));
        //****************** 비바체 훌륭한 연주 END ******************/

        //****************** 비바체 신들린 연주 START ******************/
        float vvValue1_3 = baseVVValue1 * ( 100 + musicEffectForVVMSInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        vvValueTextView_1_3.setText(String.format("%.2f", vvValue1_3));

        float vvValue2_3 = baseVVValue2 * ( 100 + musicEffectForVVASInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        vvValueTextView_2_3.setText(String.format("%.2f", vvValue2_3));

        float vvValue3_3 = baseVVValue3 * ( 100 + musicEffectForVVInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        vvValueTextView_3_3.setText(String.format("%.2f", vvValue3_3));

        //****************** 풍년가 보통 연주 START ******************/
        float bvValue1_1 = baseBVValue1;
        bvValueTextView_1_1.setText(String.format("%.2f", bvValue1_1));

        float bvValue2_1 = baseBVValue2;
        bvValueTextView_2_1.setText(String.format("%.2f", bvValue2_1));

        float bvValue3_1 = ( baseBVValue3 * ( 100 + musicEffectForBVInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100 ) + ( (float) musicParty / 100 );
        bvValueTextView_3_1.setText(String.format("%.2f", bvValue3_1));
        //****************** 풍년가 보통 연주 END ******************/

        //****************** 풍년가 훌륭한 연주 START ******************/
        float bvValue1_2 = baseBVValue1;
        bvValueTextView_1_2.setText(String.format("%.2f", bvValue1_2));

        float bvValue2_2 = baseBVValue2;
        bvValueTextView_2_2.setText(String.format("%.2f", bvValue2_2));

        float bvValue3_2 = ( baseBVValue3 * ( 100 + musicEffectForBVInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100 ) + ( (float) musicParty / 100 );
        bvValueTextView_3_2.setText(String.format("%.2f", bvValue3_2));
        //****************** 풍년가 훌륭한 연주 END ******************/

        //****************** 풍년가 신들린 연주 START ******************/
        float bvValue1_3 = baseBVValue1;
        bvValueTextView_1_3.setText(String.format("%.2f", bvValue1_3));

        float bvValue2_3 = baseBVValue2;
        bvValueTextView_2_3.setText(String.format("%.2f", bvValue2_3));

        float bvValue3_3 = ( baseBVValue3 * ( 100 + musicEffectForBVInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100 ) + ( (float) musicParty / 100 );
        bvValueTextView_3_3.setText(String.format("%.2f", bvValue3_3));
        //****************** 풍년가 신들린 연주 END ******************/

        //****************** 행진곡 보통 연주 START ******************/
        float mcValue1_1 = baseMCValue1 * ( 100 + musicEffectForMCInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        mcValueTextView_1_1.setText(String.format("%.2f", mcValue1_1));
        //****************** 행진곡 보통 연주 END ******************/

        //****************** 행진곡 훌륭한 연주 START ******************/
        float mcValue1_2 = baseMCValue1 * ( 100 + musicEffectForMCInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        mcValueTextView_1_2.setText(String.format("%.2f", mcValue1_2));
        //****************** 행진곡 훌륭한 연주 END ******************/

        //****************** 행진곡 신들린 연주 START ******************/
        float mcValue1_3 = baseMCValue1 * ( 100 + musicEffectForMCInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        mcValueTextView_1_3.setText(String.format("%.2f", mcValue1_3));
        //****************** 행진곡 신들린 연주 END ******************/

        //****************** 인내의 노래 보통 연주 START ******************/
        float spValue1_1 = baseSPValue1 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        spValueTextView_1_1.setText(String.format("%.2f", spValue1_1));

        float spValue2_1 = baseSPValue2 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        spValueTextView_2_1.setText(String.format("%.2f", spValue2_1));

        float spValue3_1 = baseSPValue3 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) normalMusicInt / 100 ) ) / 100;
        spValueTextView_3_1.setText(String.format("%.2f", spValue3_1));
        //****************** 인내의 노래 보통 연주 END ******************/

        //****************** 인내의 노래 훌륭한 연주 START ******************/
        float spValue1_2 = baseSPValue1 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        spValueTextView_1_2.setText(String.format("%.2f", spValue1_2));

        float spValue2_2 = baseSPValue2 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        spValueTextView_2_2.setText(String.format("%.2f", spValue2_2));

        float spValue3_2 = baseSPValue3 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) greatMusicInt / 100 ) ) / 100;
        spValueTextView_3_2.setText(String.format("%.2f", spValue3_2));
        //****************** 인내의 노래 훌륭한 연주 END ******************/

        //****************** 인내의 노래 신들린 연주 START ******************/
        float spValue1_3 = baseSPValue1 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        spValueTextView_1_3.setText(String.format("%.2f", spValue1_3));

        float spValue2_3 = baseSPValue2 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        spValueTextView_2_3.setText(String.format("%.2f", spValue2_3));

        float spValue3_3 = baseSPValue3 * ( 100 + musicEffectForSPInt ) * ( 1 + ( (float) bestMusicInt / 100 ) ) / 100;
        spValueTextView_3_3.setText(String.format("%.2f", spValue3_3));
        //****************** 인내의 노래 신들린 연주 END ******************/
    }

    /**
     * DataArray와 ArrayInt 받아서 Spinner 세팅
     * @param tempSpinner
     * @param textArrayResId
     * @param gubun
     */
    private void setSpinnerView(Spinner tempSpinner, int textArrayResId, final String gubun){
        final ArrayAdapter<CharSequence> finalTempDataArray;
        finalTempDataArray = ArrayAdapter.createFromResource(context, textArrayResId, R.layout.support_simple_spinner_dropdown_item);
        finalTempDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        tempSpinner.setAdapter(finalTempDataArray);
        tempSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setUpdateData(gubun, String.valueOf(i));
                if(dataMap.containsKey(gubun)) {
                    dataMap.remove(gubun);
                }
                dataMap.put(gubun, finalTempDataArray.getItem(i).toString());
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });
    }

    /**
     * 에코스톤을 위한 스피너 구분
     * @param tempSpinner
     * @param textArrayResId
     * @param gubun
     */
    private void setSpinnerViewForEcostone(Spinner tempSpinner, int textArrayResId, final String gubun){
        final ArrayAdapter<CharSequence> finalTempDataArray;
        finalTempDataArray = ArrayAdapter.createFromResource(context, textArrayResId, R.layout.support_simple_spinner_dropdown_item);
        finalTempDataArray.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        tempSpinner.setAdapter(finalTempDataArray);
        tempSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                setUpdateData(gubun, String.valueOf(i));
                if(dataMap.containsKey(gubun)) {
                    dataMap.remove(gubun);
                }
                dataMap.put(gubun, finalTempDataArray.getItem(i).toString());

                int tempArrayId = 0;
                switch (finalTempDataArray.getItem(i).toString()){
                    case "없음" :
                        tempArrayId = R.array.workmangshipSelectedFor0;
                        break;
                    case "악기 연주 효과" :
                        tempArrayId = R.array.workmangshipSelectedFor20;
                        break;
                    case "보통 연주 효과" :
                        tempArrayId = R.array.workmangshipSelectedFor10;
                        break;
                    case "훌륭한 연주 효과" :
                        tempArrayId = R.array.workmangshipSelectedFor10;
                        break;
                    case "신들린 연주 효과" :
                        tempArrayId = R.array.workmangshipSelectedFor10;
                        break;
                    case "비바체 마시속" :
                        tempArrayId = R.array.workmangshipSelectedFor6;
                        break;
                    case "비바체 공속" :
                        tempArrayId = R.array.workmangshipSelectedFor6;
                        break;
                    case "풍년가 채집속도" :
                        tempArrayId = R.array.workmangshipSelectedFor6;
                        break;
                    default:
                        tempArrayId = R.array.workmangshipSelectedFor0;
                        break;
                }
                setSpinnerView(otherEcostoneValueSpinner, tempArrayId, "otherEcostoneValueSpinner");
                if(dataMap.containsKey("otherEcostoneValueSpinner")) {
                    dataMap.remove("otherEcostoneValueSpinner");
                    dataMap.put("otherEcostoneValueSpinner", "0");
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });
    }

    /**
     * 인챈트 이름에 따라서 악기 효과 리턴
     * @param inchantName
     */
    private int setValueFromInchant(String inchantName){
        int musicValueForReturn = 0;
        switch (inchantName){
            case "없음" :
                musicValueForReturn = 0;
                break;
            case "소나타 4옵" :
                musicValueForReturn = 4;
                break;
            case "소나타 5옵" :
                musicValueForReturn = 5;
                break;
            case "소나타 6옵" :
                musicValueForReturn = 6;
                break;
            case "카덴차" :
                musicValueForReturn = 1;
                break;
            case "신나는" :
                musicValueForReturn = 3;
                break;
            case "조화/앙상블" :
                musicValueForReturn = 5;
                break;
            case "솔리스트" :
                musicValueForReturn = 2;
                break;
            case "합창/코러스 2옵" :
                musicValueForReturn = 2;
                break;
            case "앙코르" :
                musicValueForReturn = 3;
                break;
            case "코드" :
                musicValueForReturn = 1;
                break;
            case "알레그로" :
                musicValueForReturn = 3;
                break;
            case "모데라토" :
                musicValueForReturn = 2;
                break;
            case "안단테" :
                musicValueForReturn = 1;
                break;
        }

        return musicValueForReturn;
    }

    /**
     * 랭크와 구분값에 맞춰서 기본 데이터 세팅
     * @param gubun
     * @param rank
     */
    private void setBaseValueFromRank(String gubun, String rank){
        switch (gubun){
            case "IRS" :
                switch (rank){
                    case "1랭크" :
                        baseIRSValue = 15;
                        break;
                    case "2랭크" :
                        baseIRSValue = 14;
                        break;
                    case "3랭크" :
                        baseIRSValue = 13;
                        break;
                    case "4랭크" :
                        baseIRSValue = 12;
                        break;
                    case "5랭크" :
                        baseIRSValue = 11;
                        break;
                    case "6랭크" :
                        baseIRSValue = 10;
                        break;
                    case "7랭크" :
                        baseIRSValue = 9;
                        break;
                    case "8랭크" :
                        baseIRSValue = 8;
                        break;
                    case "9랭크" :
                        baseIRSValue = 7;
                        break;
                    case "A랭크" :
                        baseIRSValue = 6;
                        break;
                    case "B랭크" :
                        baseIRSValue = 5;
                        break;
                    case "C랭크" :
                        baseIRSValue = 4;
                        break;
                    case "D랭크" :
                        baseIRSValue = 3;
                        break;
                    case "E랭크" :
                        baseIRSValue = 2;
                        break;
                    case "F랭크" :
                        baseIRSValue = 1;
                        break;
                    case "연습랭크" :
                        baseIRSValue = 0;
                        break;
                }
                break;
            case "SONG" :
                switch (rank){
                    case "1랭크" :
                        baseSongValue = 15;
                        break;
                    case "2랭크" :
                        baseSongValue = 14;
                        break;
                    case "3랭크" :
                        baseSongValue = 13;
                        break;
                    case "4랭크" :
                        baseSongValue = 12;
                        break;
                    case "5랭크" :
                        baseSongValue = 11;
                        break;
                    case "6랭크" :
                        baseSongValue = 10;
                        break;
                    case "7랭크" :
                        baseSongValue = 9;
                        break;
                    case "8랭크" :
                        baseSongValue = 8;
                        break;
                    case "9랭크" :
                        baseSongValue = 7;
                        break;
                    case "A랭크" :
                        baseSongValue = 6;
                        break;
                    case "B랭크" :
                        baseSongValue = 5;
                        break;
                    case "C랭크" :
                        baseSongValue = 4;
                        break;
                    case "D랭크" :
                        baseSongValue = 3;
                        break;
                    case "E랭크" :
                        baseSongValue = 2;
                        break;
                    case "F랭크" :
                        baseSongValue = 1;
                        break;
                    case "연습랭크" :
                        baseSongValue = 0;
                        break;
                }
                break;
            case "BF" :
                switch (rank){
                    case "1랭크" :
                        baseBFValue1 = 20;
                        baseBFValue2 = 20;
                        baseBFValue3 = 11;
                        break;
                    case "2랭크" :
                        baseBFValue1 = 19;
                        baseBFValue2 = 19;
                        baseBFValue3 = 10;
                        break;
                    case "3랭크" :
                        baseBFValue1 = 18;
                        baseBFValue2 = 18;
                        baseBFValue3 = 9;
                        break;
                    case "4랭크" :
                        baseBFValue1 = 17;
                        baseBFValue2 = 17;
                        baseBFValue3 = 8;
                        break;
                    case "5랭크" :
                        baseBFValue1 = 16;
                        baseBFValue2 = 16;
                        baseBFValue3 = 7;
                        break;
                    case "6랭크" :
                        baseBFValue1 = 16;
                        baseBFValue2 = 15;
                        baseBFValue3 = 6;
                        break;
                    case "7랭크" :
                        baseBFValue1 = 15;
                        baseBFValue2 = 15;
                        baseBFValue3 = 5;
                        break;
                    case "8랭크" :
                        baseBFValue1 = 15;
                        baseBFValue2 = 14;
                        baseBFValue3 = 5;
                        break;
                    case "9랭크" :
                        baseBFValue1 = 14;
                        baseBFValue2 = 14;
                        baseBFValue3 = 4;
                        break;
                    case "A랭크" :
                        baseBFValue1 = 13;
                        baseBFValue2 = 13;
                        baseBFValue3 = 3;
                        break;
                    case "B랭크" :
                        baseBFValue1 = 13;
                        baseBFValue2 = 12;
                        baseBFValue3 = 3;
                        break;
                    case "C랭크" :
                        baseBFValue1 = 12;
                        baseBFValue2 = 12;
                        baseBFValue3 = 2;
                        break;
                    case "D랭크" :
                        baseBFValue1 = 12;
                        baseBFValue2 = 11;
                        baseBFValue3 = 2;
                        break;
                    case "E랭크" :
                        baseBFValue1 = 11;
                        baseBFValue2 = 11;
                        baseBFValue3 = 1;
                        break;
                    case "F랭크" :
                        baseBFValue1 = 10;
                        baseBFValue2 = 10;
                        baseBFValue3 = 1;
                        break;
                    case "연습랭크" :
                        baseBFValue1 = 10;
                        baseBFValue2 = 10;
                        baseBFValue3 = 0;
                        break;
                }
                break;
            case "VV" :
                switch (rank){
                    case "1랭크" :
                        baseVVValue1 = 11;
                        baseVVValue2 = 11;
                        baseVVValue3 = 11;
                        break;
                    case "2랭크" :
                        baseVVValue1 = 10;
                        baseVVValue2 = 10;
                        baseVVValue3 = 10;
                        break;
                    case "3랭크" :
                        baseVVValue1 = 9;
                        baseVVValue2 = 9;
                        baseVVValue3 = 9;
                        break;
                    case "4랭크" :
                        baseVVValue1 = 8;
                        baseVVValue2 = 8;
                        baseVVValue3 = 8;
                        break;
                    case "5랭크" :
                        baseVVValue1 = 7;
                        baseVVValue2 = 7;
                        baseVVValue3 = 7;
                        break;
                    case "6랭크" :
                        baseVVValue1 = 7;
                        baseVVValue2 = 6;
                        baseVVValue3 = 6;
                        break;
                    case "7랭크" :
                        baseVVValue1 = 6;
                        baseVVValue2 = 6;
                        baseVVValue3 = 5;
                        break;
                    case "8랭크" :
                        baseVVValue1 = 6;
                        baseVVValue2 = 5;
                        baseVVValue3 = 4;
                        break;
                    case "9랭크" :
                        baseVVValue1 = 5;
                        baseVVValue2 = 5;
                        baseVVValue3 = 4;
                        break;
                    case "A랭크" :
                        baseVVValue1 = 4;
                        baseVVValue2 = 4;
                        baseVVValue3 = 3;
                        break;
                    case "B랭크" :
                        baseVVValue1 = 4;
                        baseVVValue2 = 3;
                        baseVVValue3 = 3;
                        break;
                    case "C랭크" :
                        baseVVValue1 = 3;
                        baseVVValue2 = 3;
                        baseVVValue3 = 2;
                        break;
                    case "D랭크" :
                        baseVVValue1 = 2;
                        baseVVValue2 = 2;
                        baseVVValue3 = 2;
                        break;
                    case "E랭크" :
                        baseVVValue1 = 2;
                        baseVVValue2 = 2;
                        baseVVValue3 = 1;
                        break;
                    case "F랭크" :
                        baseVVValue1 = 2;
                        baseVVValue2 = 1;
                        baseVVValue3 = 1;
                        break;
                    case "연습랭크" :
                        baseVVValue1 = 1;
                        baseVVValue2 = 1;
                        baseVVValue3 = 1;
                        break;
                }
                break;
            case "BV" :
                switch (rank){
                    case "1랭크" :
                        baseBVValue1 = 5;
                        baseBVValue2 = 5;
                        baseBVValue3 = 25;
                        break;
                    case "2랭크" :
                        baseBVValue1 = 5;
                        baseBVValue2 = 5;
                        baseBVValue3 = 22;
                        break;
                    case "3랭크" :
                        baseBVValue1 = 5;
                        baseBVValue2 = 5;
                        baseBVValue3 = 20;
                        break;
                    case "4랭크" :
                        baseBVValue1 = 5;
                        baseBVValue2 = 4;
                        baseBVValue3 = 18;
                        break;
                    case "5랭크" :
                        baseBVValue1 = 4;
                        baseBVValue2 = 4;
                        baseBVValue3 = 16;
                        break;
                    case "6랭크" :
                        baseBVValue1 = 4;
                        baseBVValue2 = 4;
                        baseBVValue3 = 14;
                        break;
                    case "7랭크" :
                        baseBVValue1 = 4;
                        baseBVValue2 = 3;
                        baseBVValue3 = 13;
                        break;
                    case "8랭크" :
                        baseBVValue1 = 3;
                        baseBVValue2 = 3;
                        baseBVValue3 = 12;
                        break;
                    case "9랭크" :
                        baseBVValue1 = 3;
                        baseBVValue2 = 3;
                        baseBVValue3 = 11;
                        break;
                    case "A랭크" :
                        baseBVValue1 = 3;
                        baseBVValue2 = 2;
                        baseBVValue3 = 10;
                        break;
                    case "B랭크" :
                        baseBVValue1 = 2;
                        baseBVValue2 = 2;
                        baseBVValue3 = 9;
                        break;
                    case "C랭크" :
                        baseBVValue1 = 2;
                        baseBVValue2 = 2;
                        baseBVValue3 = 8;
                        break;
                    case "D랭크" :
                        baseBVValue1 = 2;
                        baseBVValue2 = 1;
                        baseBVValue3 = 7;
                        break;
                    case "E랭크" :
                        baseBVValue1 = 1;
                        baseBVValue2 = 1;
                        baseBVValue3 = 6;
                        break;
                    case "F랭크" :
                        baseBVValue1 = 1;
                        baseBVValue2 = 0;
                        baseBVValue3 = 5;
                        break;
                    case "연습랭크" :
                        baseBVValue1 = 1;
                        baseBVValue2 = 0;
                        baseBVValue3 = 0;
                        break;
                }
                break;
            case "MC" :
                switch (rank){
                    case "1랭크" :
                        baseMCValue1 = 12;
                        break;
                    case "2랭크" :
                        baseMCValue1 = 10;
                        break;
                    case "3랭크" :
                        baseMCValue1 = 8;
                        break;
                    case "4랭크" :
                        baseMCValue1 = 8;
                        break;
                    case "5랭크" :
                        baseMCValue1 = 7;
                        break;
                    case "6랭크" :
                        baseMCValue1 = 7;
                        break;
                    case "7랭크" :
                        baseMCValue1 = 6;
                        break;
                    case "8랭크" :
                        baseMCValue1 = 6;
                        break;
                    case "9랭크" :
                        baseMCValue1 = 5;
                        break;
                    case "A랭크" :
                        baseMCValue1 = 3;
                        break;
                    case "B랭크" :
                        baseMCValue1 = 3;
                        break;
                    case "C랭크" :
                        baseMCValue1 = 2;
                        break;
                    case "D랭크" :
                        baseMCValue1 = 2;
                        break;
                    case "E랭크" :
                        baseMCValue1 = 1;
                        break;
                    case "F랭크" :
                        baseMCValue1 = 1;
                        break;
                    case "연습랭크" :
                        baseMCValue1 = 1;
                        break;
                }
                break;
            case "SP" :
                switch (rank){
                    case "1랭크" :
                        baseSPValue1 = 11;
                        baseSPValue2 = 5;
                        baseSPValue3 = 410;
                        break;
                    case "2랭크" :
                        baseSPValue1 = 10;
                        baseSPValue2 = 4;
                        baseSPValue3 = 395;
                        break;
                    case "3랭크" :
                        baseSPValue1 = 9;
                        baseSPValue2 = 4;
                        baseSPValue3 = 380;
                        break;
                    case "4랭크" :
                        baseSPValue1 = 9;
                        baseSPValue2 = 3;
                        baseSPValue3 = 365;
                        break;
                    case "5랭크" :
                        baseSPValue1 = 8;
                        baseSPValue2 = 3;
                        baseSPValue3 = 350;
                        break;
                    case "6랭크" :
                        baseSPValue1 = 7;
                        baseSPValue2 = 3;
                        baseSPValue3 = 335;
                        break;
                    case "7랭크" :
                        baseSPValue1 = 7;
                        baseSPValue2 = 2;
                        baseSPValue3 = 320;
                        break;
                    case "8랭크" :
                        baseSPValue1 = 6;
                        baseSPValue2 = 2;
                        baseSPValue3 = 305;
                        break;
                    case "9랭크" :
                        baseSPValue1 = 5;
                        baseSPValue2 = 2;
                        baseSPValue3 = 290;
                        break;
                    case "A랭크" :
                        baseSPValue1 = 4;
                        baseSPValue2 = 1;
                        baseSPValue3 = 275;
                        break;
                    case "B랭크" :
                        baseSPValue1 = 3;
                        baseSPValue2 = 1;
                        baseSPValue3 = 260;
                        break;
                    case "C랭크" :
                        baseSPValue1 = 2;
                        baseSPValue2 = 1;
                        baseSPValue3 = 260;
                        break;
                    case "D랭크" :
                        baseSPValue1 = 2;
                        baseSPValue2 = 1;
                        baseSPValue3 = 230;
                        break;
                    case "E랭크" :
                        baseSPValue1 = 1;
                        baseSPValue2 = 1;
                        baseSPValue3 = 230;
                        break;
                    case "F랭크" :
                        baseSPValue1 = 1;
                        baseSPValue2 = 1;
                        baseSPValue3 = 200;
                        break;
                    case "연습랭크" :
                        baseSPValue1 = 1;
                        baseSPValue2 = 1;
                        baseSPValue3 = 100;
                        break;
                }
                break;
        }
    }
}
