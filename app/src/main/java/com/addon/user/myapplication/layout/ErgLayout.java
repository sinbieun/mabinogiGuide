/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.addon.user.myapplication.layout;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.support.design.widget.TabLayout;
import android.support.v4.content.ContextCompat;
import android.util.TypedValue;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.GridLayout;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TabHost;
import android.widget.TextView;

import com.addon.user.myapplication.MainActivity;
import com.addon.user.myapplication.R;
import com.addon.user.myapplication.view.NoticeAdapter;
import com.addon.user.myapplication.view.NoticeItem;
import com.addon.user.myapplication.view.TitleItem;

import org.w3c.dom.Text;

import java.util.ArrayList;

public class ErgLayout extends BaseLinearLayout {
    public ArrayList<NoticeItem> arrayList;
    public RelativeLayout layout;
    public MainActivity mainActivity;

    // DATA
    private String selectedWeaponName = "";
    private String selectedMenu = "";
    private SQLiteDatabase ergDb;

    // 무기 데이터
    private ArrayAdapter<CharSequence> ergWeaponSpinnerList;

    // VIEW
    private LinearLayout ergMenuLayout;
    private GridLayout ergGridLayout;

    private TextView tab1Button;
    private TextView tab2Button;
    private TextView tab3Button;

    public ErgLayout(Context context) {
        super(context);
    }

    public void initialization(Object[] obj) {
        layout = (RelativeLayout) getView(R.layout.erg_layout);
        addView(layout);

        //ViewGroup.LayoutParams params = layout.getLayoutParams();
        //params.height = (MainActivity.thisActivity.deviceHeight - (MainActivity.thisActivity.deviceHeight / 7));
        //params.height = MainActivity.thisActivity.deviceHeight;
        //layout.setLayoutParams(params);

        Spinner weaponSpinner = (Spinner) findViewById(R.id.erg_weapon_spinner);
        ergWeaponSpinnerList = ArrayAdapter.createFromResource(context, R.array.ergWeaponArray, R.layout.support_simple_spinner_dropdown_item);
        weaponSpinner.setAdapter(ergWeaponSpinnerList);
        weaponSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {

            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                selectedWeaponName = (String) ergWeaponSpinnerList.getItem(position);
                drawGridLayout();
            }

            public void onNothingSelected(AdapterView<?> parent) {
            }
        });

        tab1Button = (TextView) findViewById(R.id.tab_1);
        tab1Button.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                String prevSelectedMenu = selectedMenu;
                selectedMenu = "재료";
                if(!prevSelectedMenu.equals(selectedMenu)) {
                    drawGridLayout();

                    tab1Button.setBackgroundResource(R.drawable.tab_background_gradient_selected);
                    tab2Button.setBackgroundResource(R.drawable.tab_background_gradient);
                    tab3Button.setBackgroundResource(R.drawable.tab_background_gradient);

                    tab1Button.setTextColor(Color.parseColor("#FFFFFF"));
                    tab2Button.setTextColor(Color.parseColor("#AAAAAA"));
                    tab3Button.setTextColor(Color.parseColor("#AAAAAA"));
                }
            }
        });

        tab2Button = (TextView) findViewById(R.id.tab_2);
        tab2Button.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                String prevSelectedMenu = selectedMenu;
                selectedMenu = "효과";
                if(!prevSelectedMenu.equals(selectedMenu)) {
                    drawGridLayout();

                    tab1Button.setBackgroundResource(R.drawable.tab_background_gradient);
                    tab2Button.setBackgroundResource(R.drawable.tab_background_gradient_selected);
                    tab3Button.setBackgroundResource(R.drawable.tab_background_gradient);

                    tab1Button.setTextColor(Color.parseColor("#AAAAAA"));
                    tab2Button.setTextColor(Color.parseColor("#FFFFFF"));
                    tab3Button.setTextColor(Color.parseColor("#AAAAAA"));
                }
            }
        });

        tab3Button = (TextView) findViewById(R.id.tab_3);
        tab3Button.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                String prevSelectedMenu = selectedMenu;
                selectedMenu = "경험치";
                if(!prevSelectedMenu.equals(selectedMenu)) {
                    drawGridLayout();

                    tab1Button.setBackgroundResource(R.drawable.tab_background_gradient);
                    tab2Button.setBackgroundResource(R.drawable.tab_background_gradient);
                    tab3Button.setBackgroundResource(R.drawable.tab_background_gradient_selected);

                    tab1Button.setTextColor(Color.parseColor("#AAAAAA"));
                    tab2Button.setTextColor(Color.parseColor("#AAAAAA"));
                    tab3Button.setTextColor(Color.parseColor("#FFFFFF"));
                }
            }
        });

        if(selectedWeaponName.equals("")){
            selectedWeaponName = "듀얼건";
        }

        if(selectedMenu.equals("")){
            selectedMenu = "재료";
        }

        ergMenuLayout = findViewById(R.id.erg_menu_layout);
        ergGridLayout = findViewById(R.id.erg_grid_layout);
        drawGridLayout();
    }

    /**
     * 메뉴 레이아웃에 메뉴 그려주기 - 로직
     */
    public void drawGridLayout(){
        if(ergMenuLayout != null){
            ergMenuLayout.removeAllViews();
        }

        if(ergGridLayout != null){
            ergGridLayout.removeAllViews();
        }

        String sql;
        Cursor cursor;

        switch (selectedMenu){
            case "재료" :
                ergGridLayout.setColumnCount(7);
                ergGridLayout.setRowCount(9);

                drawGridLayoutData("단계",50,40,20, "M");
                drawGridLayoutData("시도 시, 소모되는 재료",490,40,20, "M");
                drawGridLayoutData("성공 시, 소모되는 재료",670,40,20, "M");

                // 에르그 데이터 가져오는 SQL 작성
                sql = "SELECT weaponName, class, material1, material2, material3, material4, material5, material6 FROM ERGMATERIAL WHERE  weaponName = '" + selectedWeaponName + "';";

                cursor = ergDb.rawQuery(sql, null);
                while (cursor.moveToNext()) {
                    // 단계
                    drawGridLayoutData(cursor.getString(1), 50, 40, 15, "C");

                    // 1번째 재료
                    drawGridLayoutData(cursor.getString(2), 110, 40, 15, "C");

                    // 2번째 재료
                    drawGridLayoutData(cursor.getString(3), 210, 40, 15, "C");

                    // 3번째 재료
                    drawGridLayoutData(cursor.getString(4), 170, 40, 15, "C");

                    // 4번째 재료
                    drawGridLayoutData(cursor.getString(5), 200, 40, 15, "C");

                    // 5번째 재료
                    drawGridLayoutData(cursor.getString(6), 270, 40, 15, "C");

                    // 6번째 재료
                    drawGridLayoutData(cursor.getString(7), 200, 40, 15, "C");
                }

                break;
            case "효과" :
                ergGridLayout.setRowCount(51);
                int gridColumnCount = 0;

                // 에르그 데이터 가져오는 SQL 작성
                sql = "SELECT ergLevel, effect1, effect2, effect3, effect4 FROM ERGEFFECT WHERE  weaponName = '" + selectedWeaponName + "';";

                cursor = ergDb.rawQuery(sql, null);

                switch (selectedWeaponName){
                    case "듀얼건" :
                        ergGridLayout.setColumnCount(5);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("무기 공격력 증가",150,65,18, "M");
                        drawGridLayoutData("일반 공격 시 \n일정 확률로 추가 공격",200,65,18, "M");
                        drawGridLayoutData("슈팅 러쉬 \n데미지 증가",150,65,18, "M");
                        drawGridLayoutData("듀얼건 재능 스킬 \n쿨타임 감소",150,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(2), 200, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(3), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(4), 150, 30, 15, "C");
                        }
                        break;
                    case "인술" :
                        ergGridLayout.setColumnCount(5);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("무기 공격력 증가",150,65,18, "M");
                        drawGridLayoutData("일반 공격 시 \n일정 확률로 추가 공격",200,65,18, "M");
                        drawGridLayoutData("수리검 폭풍 \n데미지 증가",150,65,18, "M");
                        drawGridLayoutData("인술 재능 스킬 \n쿨타임 감소",150,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(2), 200, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(3), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(4), 150, 30, 15, "C");
                        }
                        break;
                    case "체인 블레이드" :
                        ergGridLayout.setColumnCount(4);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("무기 공격력 증가",100,65,18, "M");
                        drawGridLayoutData("일반 공격 시 \n일정 확률로 추가 공격",200,65,18, "M");
                        drawGridLayoutData("도르카 스내치 \n도르카 획득량 증가",170,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 100, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(2), 200, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(3), 170, 30, 15, "C");
                        }
                        break;
                    case "인형술" :
                        ergGridLayout.setColumnCount(5);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("마리오네트 \n공격력 증가",150,65,18, "M");
                        drawGridLayoutData("마리오네트 \n방어, 보호, 마법방어, 마법보호 증가",270,65,18, "M");
                        drawGridLayoutData("마리오네트 \n경직 저항 확률 증가",150,65,18, "M");
                        drawGridLayoutData("인형극 스킬 \n쿨타임 감소",150,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(2), 270, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(3), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(4), 150, 30, 15, "C");
                        }
                        break;
                    case "활, 석궁" :
                        ergGridLayout.setColumnCount(5);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("무기 공격력 증가",150,65,18, "M");
                        drawGridLayoutData("레인지 계열 공격 \n조준 속도 증가",150,65,18, "M");
                        drawGridLayoutData("조준 실패 시 \n해당 스킬의 쿨타임 감소",200,65,18, "M");
                        drawGridLayoutData("크래시 샷 \n쿨타임 감소",150,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(2), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(3), 200, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(4), 150, 30, 15, "C");
                        }
                        break;
                    case "너클" :
                        ergGridLayout.setColumnCount(5);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("무기 공격력 증가",150,65,18, "M");
                        drawGridLayoutData("적 경직 시간 증가",150,65,18, "M");
                        drawGridLayoutData("연속기 데미지 증가",150,65,18, "M");
                        drawGridLayoutData("연속기 쿨타임 감소",150,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(2), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(3), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(4), 150, 30, 15, "C");
                        }
                        break;
                    case "스태프" :
                        ergGridLayout.setColumnCount(4);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("마법 공격력 증가",150,65,18, "M");
                        drawGridLayoutData("중급 마법 스킬 \n마나 소모량 감소",200,65,18, "M");
                        drawGridLayoutData("중급 마법 스킬 \n시전 시간 감소",200,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(2), 200, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(3), 200, 30, 15, "C");
                        }
                        break;
                    case "실린더" :
                        ergGridLayout.setColumnCount(5);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("4대 속성 연금술 \n데미지 증가",150,65,18, "M");
                        drawGridLayoutData("히트 버스터 \n효과 증가",150,65,18, "M");
                        drawGridLayoutData("플레이머 데미지 \n주기 감소",150,65,18, "M");
                        drawGridLayoutData("체인 실린더 \n쿨타임 감소",150,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(2), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(3), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(4), 150, 30, 15, "C");
                        }

                        break;
                    case "양손검" :
                        gridColumnCount = 5;
                        ergGridLayout.setColumnCount(gridColumnCount);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("무기 공격력 증가",150,65,18, "M");
                        drawGridLayoutData("방어, 보호, \n마법방어, 마법보호 증가",180,65,18, "M");
                        drawGridLayoutData("스플래시 반경 증가",150,65,18, "M");
                        drawGridLayoutData("근접 전투 재능 스킬 \n쿨타임 감소",170,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(2), 180, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(3), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(4), 170, 30, 15, "C");
                        }
                        break;
                    case "원드" :
                        ergGridLayout.setColumnCount(2);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("마법 공격력 증가",150,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                        }

                        break;
                    case "한손검, 아틀라틀" :
                        ergGridLayout.setColumnCount(2);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("무기 공격력 증가",150,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                        }

                        break;
                    case "랜스" :
                        ergGridLayout.setColumnCount(4);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("무기 공격력 증가",150,65,18, "M");
                        drawGridLayoutData("방어, 보호, \n마법방어, 마법보호 증가",180,65,18, "M");
                        drawGridLayoutData("경직 저항 확률 증가",170,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(2), 180, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(3), 170, 30, 15, "C");
                        }

                        break;
                    case "양손도끼, 둔기" :
                        ergGridLayout.setColumnCount(5);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("무기 공격력 증가",150,65,18, "M");
                        drawGridLayoutData("방어, 보호, \n마법방어, 마법보호 증가",180,65,18, "M");
                        drawGridLayoutData("경직 저항 확률 증가",170,65,18, "M");
                        drawGridLayoutData("근접 전투 재능 스킬 \n쿨타임 감소",170,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(2), 180, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(3), 170, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(4), 170, 30, 15, "C");
                        }

                        break;
                    case "한손둔기" :
                        gridColumnCount = 5;
                        ergGridLayout.setColumnCount(gridColumnCount);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("무기 공격력 증가",150,65,18, "M");
                        drawGridLayoutData("방어, 보호, \n마법방어, 마법보호 증가",180,65,18, "M");
                        drawGridLayoutData("경직 저항 확률 증가",170,65,18, "M");
                        drawGridLayoutData("근접 전투 재능 스킬 \n쿨타임 감소",170,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(2), 180, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(3), 170, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(4), 170, 30, 15, "C");
                        }

                        break;
                    case "한손도끼" :
                        gridColumnCount = 5;
                        ergGridLayout.setColumnCount(gridColumnCount);

                        drawGridLayoutData("레벨",50,65,18, "M");
                        drawGridLayoutData("무기 공격력 증가",150,65,18, "M");
                        drawGridLayoutData("방어, 보호, \n마법방어, 마법보호 증가",180,65,18, "M");
                        drawGridLayoutData("윈드밀 데미지 증가",170,65,18, "M");
                        drawGridLayoutData("근접 전투 재능 스킬 \n쿨타임 감소",170,65,18, "M");

                        while (cursor.moveToNext()) {
                            drawGridLayoutData(cursor.getString(0), 50, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(1), 150, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(2), 180, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(3), 170, 30, 15, "C");
                            drawGridLayoutData(cursor.getString(4), 170, 30, 15, "C");
                        }

                        break;
                }

                break;
            case "경험치" :
                ergGridLayout.setColumnCount(3);
                ergGridLayout.setRowCount(50);

                drawGridLayoutData("레벨",130,30,25, "M");
                drawGridLayoutData("경험치",130,30,25, "M");
                drawGridLayoutData("누적 경험치",130,30,25, "M");

                // 에르그 데이터 가져오는 SQL 작성
                sql = "SELECT ergLevel, exp, totalExp FROM ERGEXP";

                cursor = ergDb.rawQuery(sql, null);
                while (cursor.moveToNext()) {
                    // 레벨
                    drawGridLayoutData(cursor.getString(0), 130, 30, 15, "C");

                    // 경험치
                    drawGridLayoutData(cursor.getString(1), 130, 30, 15, "C");

                    // 누적 경험치
                    drawGridLayoutData(cursor.getString(2), 130, 30, 15, "C");
                }

                break;
        }
    }

    /**
     * 메뉴 레이아웃에 그려주기 - 데이터
     * @param data
     * @param objWidth
     * @param objHeight
     * @param objTextSize
     */
    public void drawGridLayoutData(String data, int objWidth, int objHeight, int objTextSize, String kindGubun){
        if("M".equals(kindGubun)) {
            TextView tempTextView = new TextView(context);
            tempTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, objTextSize);
            tempTextView.setTextColor(Color.parseColor("#FFFFFF"));
            tempTextView.setGravity(Gravity.CENTER);
            tempTextView.setText(data);

            ViewGroup.LayoutParams tempViewParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            tempViewParams.width = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, objWidth, getResources().getDisplayMetrics());
            tempViewParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, objHeight, getResources().getDisplayMetrics());
            tempTextView.setLayoutParams(tempViewParams);

            tempTextView.setBackgroundResource(R.drawable.grid_border_2);

            ergMenuLayout.addView(tempTextView);
        }else if("C".equals(kindGubun)) {
            TextView tempView = new TextView(context);
            tempView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, objTextSize);
            tempView.setTextColor(Color.parseColor("#FFFFFF"));
            tempView.setGravity(Gravity.CENTER);
            tempView.setText(data);

            ViewGroup.LayoutParams tempParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            tempParams.width = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, objWidth, getResources().getDisplayMetrics());
            tempParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, objHeight, getResources().getDisplayMetrics());
            tempView.setLayoutParams(tempParams);

            //tempView.setBackgroundResource(R.drawable.grid_border_2);

            ergGridLayout.addView(tempView);
        }
    }
    
    public void setData(SQLiteDatabase db, Object[] obj) {
        this.ergDb = db;
    }
    
    public void setData(Object[] obj) {
    }
}
